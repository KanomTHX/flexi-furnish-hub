import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  'https://hartshwcchbsnmbrjdyn.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhcnRzaHdjY2hic25tYnJqZHluIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDAzNzU3NCwiZXhwIjoyMDY5NjEzNTc0fQ.EuWZV7-3o9GsDPGKAS4L4L3t7GKQkn7kfnoHpc9IzOw'
);

async function checkAllRequiredTables() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Installment System');
  console.log('================================================================');

  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ
  const requiredTables = [
    {
      name: 'customers',
      description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
      requiredColumns: ['id', 'name', 'phone', 'email', 'address', 'id_card', 'occupation', 'monthly_income']
    },
    {
      name: 'guarantors', 
      description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô',
      requiredColumns: ['id', 'name', 'phone', 'email', 'address', 'id_card', 'occupation', 'monthly_income', 'emergency_contact_name', 'emergency_contact_phone', 'emergency_contact_relationship', 'created_by', 'branch_id']
    },
    {
      name: 'installment_plans',
      description: '‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞',
      requiredColumns: ['id', 'plan_number', 'name', 'months', 'number_of_installments', 'interest_rate', 'down_payment', 'down_payment_percent', 'processing_fee', 'installment_amount', 'min_amount', 'max_amount', 'requires_guarantor', 'is_active', 'status', 'start_date', 'branch_id']
    },
    {
      name: 'installment_contracts',
      description: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞',
      requiredColumns: ['id', 'contract_number', 'customer_id', 'plan_id', 'guarantor_id', 'total_amount', 'down_payment', 'financed_amount', 'monthly_payment', 'status', 'created_by', 'branch_id']
    },
    {
      name: 'installment_payments',
      description: '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏á‡∏ß‡∏î',
      requiredColumns: ['id', 'contract_id', 'installment_number', 'due_date', 'amount', 'principal_amount', 'interest_amount', 'status', 'branch_id']
    },
    {
      name: 'contract_documents',
      description: '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
      requiredColumns: ['id', 'contract_id', 'guarantor_id', 'customer_id', 'document_type', 'file_name', 'file_path', 'uploaded_by']
    },
    {
      name: 'branches',
      description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô FK)',
      requiredColumns: ['id', 'name']
    }
  ];

  const results = {
    existingTables: [],
    missingTables: [],
    tablesWithMissingColumns: []
  };

  for (const table of requiredTables) {
    try {
      console.log(`\nüìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${table.name} (${table.description})`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const { data, error } = await supabase
        .from(table.name)
        .select('*')
        .limit(1);

      if (error) {
        if (error.code === '42P01') {
          console.log(`‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table.name} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
          results.missingTables.push(table);
          continue;
        } else {
          console.log(`‚ö†Ô∏è  Error checking ${table.name}:`, error.message);
          continue;
        }
      }

      console.log(`‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table.name} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
      results.existingTables.push(table.name);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      if (data && data.length > 0) {
        const existingColumns = Object.keys(data[0]);
        const missingColumns = table.requiredColumns.filter(col => !existingColumns.includes(col));
        
        if (missingColumns.length > 0) {
          console.log(`‚ö†Ô∏è  ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢: ${missingColumns.join(', ')}`);
          results.tablesWithMissingColumns.push({
            tableName: table.name,
            missingColumns: missingColumns,
            existingColumns: existingColumns
          });
        } else {
          console.log(`‚úÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`);
        }
        
        console.log(`üìä ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: ${existingColumns.join(', ')}`);
      } else {
        console.log(`üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏î‡πâ`);
        
        // ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        try {
          const testData = {};
          table.requiredColumns.forEach(col => {
            testData[col] = col === 'id' ? 'test-id' : 'test-value';
          });
          
          const { error: insertError } = await supabase
            .from(table.name)
            .insert(testData);
            
          if (insertError) {
            console.log(`üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å insert error: ${insertError.message}`);
          }
        } catch (testError) {
          console.log(`üîç ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö insert ‡πÑ‡∏î‡πâ`);
        }
      }

    } catch (err) {
      console.log(`‚ùå Error checking table ${table.name}:`, err.message);
    }
  }

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
  console.log('================================================================');
  console.log(`‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: ${results.existingTables.length}/${requiredTables.length}`);
  console.log(`‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢: ${results.missingTables.length}`);
  console.log(`‚ö†Ô∏è  ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ${results.tablesWithMissingColumns.length}`);

  if (results.missingTables.length > 0) {
    console.log('\n‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á:');
    results.missingTables.forEach(table => {
      console.log(`   - ${table.name}: ${table.description}`);
    });
  }

  if (results.tablesWithMissingColumns.length > 0) {
    console.log('\n‚ö†Ô∏è  ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:');
    results.tablesWithMissingColumns.forEach(table => {
      console.log(`   - ${table.tableName}: ${table.missingColumns.join(', ')}`);
    });
  }

  if (results.missingTables.length === 0 && results.tablesWithMissingColumns.length === 0) {
    console.log('\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
  } else {
    console.log('\nüîß ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  }

  return results;
}

checkAllRequiredTables();