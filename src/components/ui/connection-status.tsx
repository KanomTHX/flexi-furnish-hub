import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Wifi, WifiOff, AlertCircle, CheckCircle } from 'lucide-react';
import { useSupabaseConnection } from '@/hooks/useSupabaseQuery';
import { cn } from '@/lib/utils';

interface ConnectionStatusProps {
  className?: string;
  showText?: boolean;
}

export function ConnectionStatus({ className, showText = true }: ConnectionStatusProps) {
  const { data: connection, isLoading } = useSupabaseConnection();

  if (isLoading) {
    return (
      <Badge variant="secondary" className={cn("animate-pulse", className)}>
        <AlertCircle className="w-3 h-3 mr-1" />
        {showText && "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö..."}
      </Badge>
    );
  }

  const isConnected = connection?.connected ?? false;

  return (
    <Badge 
      variant={isConnected ? "default" : "destructive"} 
      className={cn(
        "transition-all duration-200",
        isConnected ? "bg-green-500 hover:bg-green-600" : "bg-red-500 hover:bg-red-600",
        className
      )}
    >
      {isConnected ? (
        <CheckCircle className="w-3 h-3 mr-1" />
      ) : (
        <WifiOff className="w-3 h-3 mr-1" />
      )}
      {showText && (isConnected ? "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß" : "‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")}
    </Badge>
  );
}

// Detailed connection info component
export function ConnectionDetails() {
  const { data: connection, isLoading, error } = useSupabaseConnection();

  if (isLoading) {
    return (
      <div className="flex items-center space-x-2 text-sm text-muted-foreground">
        <div className="animate-spin rounded-full h-4 w-4 border-2 border-gray-300 border-t-blue-600"></div>
        <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...</span>
      </div>
    );
  }

  const isConnected = connection?.connected ?? false;
  const isFallback = connection?.fallback ?? false;

  return (
    <div className="space-y-2">
      <div className="flex items-center space-x-2">
        {isConnected ? (
          <Wifi className="w-4 h-4 text-green-500" />
        ) : (
          <WifiOff className="w-4 h-4 text-red-500" />
        )}
        <span className={cn(
          "text-sm font-medium",
          isConnected ? "text-green-700" : "text-red-700"
        )}>
          {isConnected ? "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"}
        </span>
      </div>
      
      {!isConnected && connection?.error && (
        <div className="text-xs text-red-600 bg-red-50 p-2 rounded">
          <strong>‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> {connection.error}
          {connection.details && (
            <div className="mt-1 text-xs text-red-500">
              ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {connection.details}
            </div>
          )}
          <div className="mt-2 text-xs text-red-700">
            üí° <strong>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
          </div>
        </div>
      )}
      
      {isConnected && (
        <div className="text-xs text-green-600 bg-green-50 p-2 rounded">
          ‚úÖ {connection.message || '‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
          {isFallback && (
            <div className="mt-1 text-xs text-yellow-600">
              ‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î - ‡∏ö‡∏≤‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            </div>
          )}
        </div>
      )}
    </div>
  );
}

// Hook for connection-dependent features
export function useConnectionAware() {
  const { data: connection } = useSupabaseConnection();
  const isConnected = connection?.connected ?? false;

  return {
    isConnected,
    isOffline: !isConnected,
    showOfflineMessage: () => ({
      title: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠",
      description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï",
      variant: "destructive" as const
    })
  };
}