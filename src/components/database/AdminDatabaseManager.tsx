import React, { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Textarea } from '@/components/ui/textarea'
import { 
  Database, 
  Play, 
  Trash2, 
  RefreshCw, 
  Shield, 
  AlertTriangle,
  CheckCircle,
  XCircle,
  Loader2
} from 'lucide-react'
import { adminOperations, setupDatabase } from '@/utils/supabaseAdmin'
import { SupabaseTableCreator } from '@/utils/supabaseTableCreator'

export function AdminDatabaseManager() {
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState<any>(null)
  const [tables, setTables] = useState<string[]>([])
  const [customSQL, setCustomSQL] = useState('')

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
  const supabaseServiceRoleKey = import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY
  const useServiceRole = import.meta.env.VITE_USE_SERVICE_ROLE === 'true'
  
  const hasValidConfig = supabaseUrl && 
    supabaseUrl !== 'YOUR_SUPABASE_URL' && 
    supabaseServiceRoleKey && 
    supabaseServiceRoleKey !== 'YOUR_SERVICE_ROLE_KEY'

  const handleSetupDatabase = async () => {
    setLoading(true)
    setResult(null)
    
    try {
      const tableCreator = new SupabaseTableCreator()
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      console.log('üîç Checking existing tables...')
      const checkResult = await tableCreator.checkTablesExist()
      
      if (checkResult.success) {
        console.log(`üìä Found ${checkResult.totalExisting}/${checkResult.totalRequired} tables`)
        
        if (checkResult.missingTables.length === 0) {
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
          console.log('‚úÖ All tables exist, inserting sample data...')
          const dataResult = await tableCreator.insertSampleData()
          
          setResult({
            success: true,
            message: `All tables exist. ${dataResult.summary}`,
            tables: checkResult.existingTables,
            dataInserted: dataResult.success
          })
          setTables(checkResult.existingTables)
        } else {
          // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
          console.log(`üìã Creating ${checkResult.missingTables.length} missing tables...`)
          const createResult = await tableCreator.createAllTables()
          
          // ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
          let dataResult = null
          if (createResult.successCount > 0) {
            console.log('üìù Inserting sample data...')
            dataResult = await tableCreator.insertSampleData()
          }
          
          setResult({
            success: createResult.success,
            message: createResult.summary + (dataResult ? `. ${dataResult.summary}` : ''),
            results: createResult.results,
            manualCreationRequired: createResult.results.some((r: any) => r.requiresManualCreation)
          })
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á
          const updatedCheck = await tableCreator.checkTablesExist()
          if (updatedCheck.success) {
            setTables(updatedCheck.existingTables)
          }
        }
      } else {
        throw new Error(checkResult.error)
      }
      
    } catch (error) {
      console.error('Database setup error:', error)
      setResult({
        success: false,
        error: error instanceof Error ? error.message : 'Failed to setup database'
      })
    } finally {
      setLoading(false)
    }
  }

  const handleListTables = async () => {
    setLoading(true)
    
    try {
      const tablesResult = await adminOperations.listTables()
      setTables(tablesResult.success ? tablesResult.tables : [])
      setResult(tablesResult)
    } catch (error) {
      setResult({
        success: false,
        error: error instanceof Error ? error.message : 'Failed to list tables'
      })
    } finally {
      setLoading(false)
    }
  }

  const handleResetDatabase = async () => {
    if (!confirm('‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!')) {
      return
    }
    
    setLoading(true)
    setResult(null)
    
    try {
      const resetResult = await adminOperations.resetDatabase()
      setResult(resetResult)
      setTables([])
    } catch (error) {
      setResult({
        success: false,
        error: error instanceof Error ? error.message : 'Failed to reset database'
      })
    } finally {
      setLoading(false)
    }
  }

  const handleExecuteCustomSQL = async () => {
    if (!customSQL.trim()) {
      setResult({
        success: false,
        error: 'Please enter SQL commands'
      })
      return
    }
    
    setLoading(true)
    setResult(null)
    
    try {
      const sqlResult = await adminOperations.executeSQL(customSQL)
      setResult(sqlResult)
    } catch (error) {
      setResult({
        success: false,
        error: error instanceof Error ? error.message : 'Failed to execute SQL'
      })
    } finally {
      setLoading(false)
    }
  }

  const getResultIcon = () => {
    if (!result) return null
    return result.success ? 
      <CheckCircle className="h-4 w-4 text-green-600" /> : 
      <XCircle className="h-4 w-4 text-red-600" />
  }

  const getResultBadge = () => {
    if (!result) return null
    return result.success ? 
      <Badge className="bg-green-600">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</Badge> : 
      <Badge variant="destructive">‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</Badge>
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  if (!hasValidConfig) {
    return (
      <Alert variant="destructive">
        <XCircle className="h-4 w-4" />
        <AlertDescription>
          <strong>‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Admin Mode ‡πÑ‡∏î‡πâ:</strong> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
          <ul className="mt-2 list-disc list-inside text-sm">
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö VITE_SUPABASE_URL</li>
            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö VITE_SUPABASE_SERVICE_ROLE_KEY</li>
            <li>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ VITE_USE_SERVICE_ROLE=true</li>
          </ul>
        </AlertDescription>
      </Alert>
    )
  }

  return (
    <div className="space-y-6">
      {/* Warning */}
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          <strong>‚ö†Ô∏è ‡πÇ‡∏´‡∏°‡∏î Admin:</strong> ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Service Role Key ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 
          ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
          {useServiceRole && <span className="block mt-1 text-green-600">‚úÖ Service Role Mode ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>}
        </AlertDescription>
      </Alert>

      {/* Database Setup */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Database className="h-5 w-5" />
            ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </CardTitle>
          <CardDescription>
            ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö POS
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Button 
              onClick={handleSetupDatabase}
              disabled={loading}
              className="flex-1"
            >
              {loading ? (
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
              ) : (
                <Play className="h-4 w-4 mr-2" />
              )}
              ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </Button>
            
            <Button 
              onClick={handleListTables}
              disabled={loading}
              variant="outline"
            >
              {loading ? (
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
              ) : (
                <RefreshCw className="h-4 w-4 mr-2" />
              )}
              ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            </Button>
            
            <Button 
              onClick={handleResetDatabase}
              disabled={loading}
              variant="destructive"
            >
              {loading ? (
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
              ) : (
                <Trash2 className="h-4 w-4 mr-2" />
              )}
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            </Button>
          </div>

          {/* Tables List */}
          {tables.length > 0 && (
            <div>
              <h4 className="font-medium mb-2">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ({tables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á):</h4>
              <div className="grid grid-cols-3 gap-2">
                {tables.map((table) => (
                  <Badge key={table} variant="outline" className="justify-center">
                    {table}
                  </Badge>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Custom SQL */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            ‡∏£‡∏±‡∏ô SQL ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
          </CardTitle>
          <CardDescription>
            ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á)
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Textarea
            placeholder="‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô..."
            value={customSQL}
            onChange={(e) => setCustomSQL(e.target.value)}
            rows={6}
            className="font-mono text-sm"
          />
          
          <Button 
            onClick={handleExecuteCustomSQL}
            disabled={loading || !customSQL.trim()}
            className="w-full"
          >
            {loading ? (
              <Loader2 className="h-4 w-4 animate-spin mr-2" />
            ) : (
              <Play className="h-4 w-4 mr-2" />
            )}
            ‡∏£‡∏±‡∏ô SQL
          </Button>
        </CardContent>
      </Card>

      {/* Results */}
      {result && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {getResultIcon()}
              ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
              {getResultBadge()}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {result.success ? (
              <div className="space-y-2">
                <Alert>
                  <CheckCircle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</strong> {result.message || result.summary || 'Operation completed successfully'}
                  </AlertDescription>
                </Alert>
                
                {result.results && (
                  <div className="space-y-1">
                    <h4 className="font-medium text-sm">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</h4>
                    {result.results.map((r: any, i: number) => (
                      <div key={i} className="text-xs font-mono bg-muted p-2 rounded">
                        {r.success ? '‚úÖ' : '‚ùå'} {r.table || r.statement?.substring(0, 50)}
                        {r.error && <div className="text-red-600 mt-1">{r.error}</div>}
                        {r.requiresManualCreation && (
                          <div className="text-yellow-600 mt-1">‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á</div>
                        )}
                      </div>
                    ))}
                  </div>
                )}

                {result.manualCreationRequired && (
                  <Alert variant="destructive">
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      <strong>‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á:</strong> ‡∏ö‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ
                      <div className="mt-2">
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={() => window.open('/manual-database-setup', '_blank')}
                        >
                          ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö Manual
                        </Button>
                      </div>
                    </AlertDescription>
                  </Alert>
                )}
              </div>
            ) : (
              <div className="space-y-2">
                <Alert variant="destructive">
                  <XCircle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:</strong> {result.error}
                  </AlertDescription>
                </Alert>
                
                <Alert>
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö Manual
                    <div className="mt-2">
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => window.open('/manual-database-setup', '_blank')}
                      >
                        ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö Manual
                      </Button>
                    </div>
                  </AlertDescription>
                </Alert>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  )
}