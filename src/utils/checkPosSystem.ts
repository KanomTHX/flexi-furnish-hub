import { supabase } from '@/lib/supabase'

export async function checkPosSystemTables() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö POS...')
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const requiredTables = [
      'branches',
      'employees', 
      'customers',
      'product_categories',
      'products',
      'product_inventory',
      'sales_transactions',
      'sales_transaction_items',
      'warehouses',
      'stock_movements',
      'purchase_orders',
      'purchase_order_items',
      'chart_of_accounts',
      'journal_entries',
      'journal_entry_lines',
      'accounting_transactions',
      'claims',
      'installment_plans',
      'installment_payments'
    ]
    
    const tableResults = []
    
    for (const tableName of requiredTables) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('count', { count: 'exact', head: true })
        
        if (error) {
          console.log(`‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á '${tableName}' ‡πÑ‡∏°‡πà‡∏û‡∏ö:`, error.message)
          tableResults.push({ 
            table: tableName, 
            exists: false, 
            error: error.message,
            status: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á'
          })
        } else {
          console.log(`‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á '${tableName}' ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`)
          tableResults.push({ 
            table: tableName, 
            exists: true,
            count: data?.length || 0,
            status: '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
          })
        }
      } catch (err) {
        console.log(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á '${tableName}':`, err)
        tableResults.push({ 
          table: tableName, 
          exists: false, 
          error: String(err),
          status: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
        })
      }
    }
    
    const existingTables = tableResults.filter(t => t.exists).length
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const sampleDataResults = []
    
    const sampleTables = ['branches', 'product_categories', 'chart_of_accounts']
    
    for (const tableName of sampleTables) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(5)
        
        if (error) {
          sampleDataResults.push({
            table: tableName,
            count: 0,
            status: '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
            error: error.message
          })
        } else {
          const count = data?.length || 0
          sampleDataResults.push({
            table: tableName,
            count,
            status: count > 0 ? '‚úÖ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á' : '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
            data: data?.slice(0, 3) // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
          })
        }
      } catch (err) {
        sampleDataResults.push({
          table: tableName,
          count: 0,
          status: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          error: String(err)
        })
      }
    }
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Foreign Key Relationships
    const relationshipTests = [
      { table: 'employees', column: 'branch_id', references: 'branches' },
      { table: 'customers', column: 'branch_id', references: 'branches' },
      { table: 'products', column: 'category_id', references: 'product_categories' },
      { table: 'sales_transactions', column: 'branch_id', references: 'branches' },
      { table: 'sales_transactions', column: 'customer_id', references: 'customers' }
    ]
    
    const relationshipResults = []
    
    for (const rel of relationshipTests) {
      try {
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ join ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        const { data, error } = await supabase
          .from(rel.table)
          .select(`${rel.column}, ${rel.references}(*)`)
          .limit(1)
        
        if (error) {
          relationshipResults.push({
            relationship: `${rel.table}.${rel.column} -> ${rel.references}`,
            status: '‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            error: error.message
          })
        } else {
          relationshipResults.push({
            relationship: `${rel.table}.${rel.column} -> ${rel.references}`,
            status: '‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
          })
        }
      } catch (err) {
        relationshipResults.push({
          relationship: `${rel.table}.${rel.column} -> ${rel.references}`,
          status: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          error: String(err)
        })
      }
    }
    
    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const overallStatus = existingTables === requiredTables.length 
      ? '‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö POS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      : `‚ö†Ô∏è ‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${existingTables}/${requiredTables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á`
    
    return {
      success: true,
      summary: {
        tablesFound: existingTables,
        totalTables: requiredTables.length,
        status: overallStatus
      },
      tableResults,
      sampleDataResults,
      relationshipResults,
      recommendations: existingTables < requiredTables.length 
        ? ['‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô SQL script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']
        : ['‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö POS ‡πÑ‡∏î‡πâ']
    }
    
  } catch (error) {
    console.error('üí• ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö POS ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏',
      details: error
    }
  }
}

export async function checkPosSystemColumns() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç...')
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const importantTables = [
      {
        name: 'branches',
        requiredColumns: ['id', 'code', 'name', 'address', 'phone', 'manager_name', 'status']
      },
      {
        name: 'products', 
        requiredColumns: ['id', 'product_code', 'name', 'cost_price', 'selling_price', 'status']
      },
      {
        name: 'sales_transactions',
        requiredColumns: ['id', 'branch_id', 'customer_id', 'transaction_number', 'total_amount', 'status']
      },
      {
        name: 'customers',
        requiredColumns: ['id', 'branch_id', 'name', 'phone', 'email', 'status']
      }
    ]
    
    const columnResults = []
    
    for (const table of importantTables) {
      try {
        // ‡πÉ‡∏ä‡πâ INFORMATION_SCHEMA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        const { data, error } = await supabase.rpc('get_table_columns', {
          table_name: table.name
        })
        
        if (error) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ function ‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ select
          const { data: testData, error: testError } = await supabase
            .from(table.name)
            .select('*')
            .limit(0)
          
          if (testError) {
            columnResults.push({
              table: table.name,
              status: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏î‡πâ',
              error: testError.message
            })
            continue
          }
        }
        
        columnResults.push({
          table: table.name,
          status: '‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
          note: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£ query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        })
        
      } catch (err) {
        columnResults.push({
          table: table.name,
          status: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          error: String(err)
        })
      }
    }
    
    return {
      success: true,
      columnResults
    }
    
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'
    }
  }
}