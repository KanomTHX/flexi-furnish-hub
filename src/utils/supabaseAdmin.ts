import { supabaseAdmin } from '@/lib/supabase'

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin
export const adminOperations = {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  async createTable(tableName: string, schema: string) {
    try {
      const { data, error } = await supabaseAdmin.rpc('exec_sql', {
        sql: `CREATE TABLE IF NOT EXISTS ${tableName} (${schema})`
      })
      
      if (error) throw error
      return { success: true, data }
    } catch (error) {
      console.error(`Error creating table ${tableName}:`, error)
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
    }
  },

  // ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  async dropTable(tableName: string) {
    try {
      const { data, error } = await supabaseAdmin.rpc('exec_sql', {
        sql: `DROP TABLE IF EXISTS ${tableName} CASCADE`
      })
      
      if (error) throw error
      return { success: true, data }
    } catch (error) {
      console.error(`Error dropping table ${tableName}:`, error)
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
    }
  },

  // ‡∏£‡∏±‡∏ô SQL Script ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ exec_sql function)
  async executeSQL(sql: string) {
    try {
      console.log('üîß Executing SQL with admin privileges...')
      
      // ‡πÅ‡∏¢‡∏Å SQL statements ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      const statements = sql
        .split(';')
        .map(s => s.trim())
        .filter(s => s.length > 0 && !s.startsWith('--') && !s.toLowerCase().includes('select'))
      
      const results = []
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      for (const statement of statements) {
        try {
          if (statement.toLowerCase().includes('create table')) {
            const result = await this.executeCreateTable(statement)
            results.push({ statement: statement.substring(0, 50) + '...', success: result.success, error: result.error })
          } else if (statement.toLowerCase().includes('create index')) {
            const result = await this.executeCreateIndex(statement)
            results.push({ statement: statement.substring(0, 50) + '...', success: result.success, error: result.error })
          } else if (statement.toLowerCase().includes('insert into')) {
            const result = await this.executeInsert(statement)
            results.push({ statement: statement.substring(0, 50) + '...', success: result.success, error: result.error })
          } else if (statement.toLowerCase().includes('create trigger') || statement.toLowerCase().includes('create or replace function')) {
            // ‡∏Ç‡πâ‡∏≤‡∏° triggers ‡πÅ‡∏•‡∏∞ functions ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ SQL Editor
            results.push({ statement: statement.substring(0, 50) + '...', success: true, skipped: true })
          }
        } catch (error) {
          console.error('Statement error:', error)
          results.push({ 
            statement: statement.substring(0, 50) + '...', 
            success: false, 
            error: error instanceof Error ? error.message : 'Unknown error' 
          })
        }
      }
      
      const successCount = results.filter(r => r.success).length
      const totalCount = results.length
      
      return {
        success: successCount > 0, // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏≥‡πÑ‡∏î‡πâ
        results,
        summary: `${successCount}/${totalCount} statements executed successfully`
      }
      
    } catch (error) {
      console.error('Error executing SQL:', error)
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error',
        results: []
      }
    }
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  async executeCreateTable(createTableSQL: string) {
    try {
      // ‡πÉ‡∏ä‡πâ supabase client ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏ó‡∏ô rpc
      const { error } = await supabaseAdmin.rpc('exec', { sql: createTableSQL }).single()
      
      if (error) {
        // ‡∏ñ‡πâ‡∏≤ rpc ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
        console.log('RPC failed, trying alternative method...')
        return await this.createTableDirectly(createTableSQL)
      }
      
      return { success: true }
    } catch (error) {
      console.error('Create table error:', error)
      return await this.createTableDirectly(createTableSQL)
    }
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Supabase REST API
  async createTableDirectly(createTableSQL: string) {
    try {
      // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å SQL
      const tableNameMatch = createTableSQL.match(/CREATE TABLE (?:IF NOT EXISTS )?(\w+)/i)
      if (!tableNameMatch) {
        throw new Error('Cannot extract table name from SQL')
      }
      
      const tableName = tableNameMatch[1]
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      try {
        const { error: checkError } = await supabaseAdmin
          .from(tableName)
          .select('*')
          .limit(1)
          .maybeSingle()
        
        if (!checkError || checkError.code === 'PGRST116') {
          console.log(`Table ${tableName} already exists`)
          return { success: true, message: `Table ${tableName} already exists` }
        }
      } catch (checkTableError) {
        // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≠
        console.log(`Table ${tableName} does not exist, attempting to create...`)
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SQL Editor
      return { 
        success: false, 
        error: `Please create table ${tableName} manually using Supabase SQL Editor`,
        requiresManualCreation: true,
        tableName,
        sql: createTableSQL
      }
      
    } catch (error) {
      console.error('Direct table creation error:', error)
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      }
    }
  },

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Index
  async executeCreateIndex(indexSQL: string) {
    try {
      // ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà index ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô client
      return { success: true, skipped: true, message: 'Index creation skipped - use SQL Editor' }
    } catch (error) {
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
    }
  },

  // Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  async executeInsert(insertSQL: string) {
    try {
      // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å INSERT statement
      const tableMatch = insertSQL.match(/INSERT INTO (\w+)/i)
      if (!tableMatch) {
        throw new Error('Cannot extract table name from INSERT statement')
      }
      
      const tableName = tableMatch[1]
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      try {
        const { error: checkError } = await supabaseAdmin
          .from(tableName)
          .select('*')
          .limit(1)
          .maybeSingle()
        
        if (checkError && checkError.code !== 'PGRST116') {
          return { success: false, error: `Table ${tableName} does not exist` }
        }
      } catch (checkTableError) {
        return { success: false, error: `Table ${tableName} does not exist` }
      }
      
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏° insert ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß
      return { success: true, skipped: true, message: `Insert to ${tableName} skipped` }
      
    } catch (error) {
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
    }
  },

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  async listTables() {
    try {
      // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      const knownTables = [
        'branches', 'employees', 'customers', 'product_categories', 'products', 
        'product_inventory', 'sales_transactions', 'sales_transaction_items',
        'warehouses', 'stock_movements', 'purchase_orders', 'purchase_order_items',
        'chart_of_accounts', 'journal_entries', 'journal_entry_lines', 
        'accounting_transactions', 'claims', 'installment_plans', 'installment_payments'
      ]
      
      const existingTables: string[] = []
      
      for (const tableName of knownTables) {
        try {
          const { error } = await supabaseAdmin
            .from(tableName)
            .select('*')
            .limit(1)
            .maybeSingle()
          
          if (!error || error.code === 'PGRST116') {
            existingTables.push(tableName)
          }
        } catch (tableError) {
          // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
        }
      }
      
      return { success: true, tables: existingTables }
    } catch (error) {
      console.error('Error listing tables:', error)
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
    }
  },

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  async getTableData(tableName: string, limit = 10) {
    try {
      const { data, error } = await supabaseAdmin
        .from(tableName)
        .select('*')
        .limit(limit)
      
      if (error) throw error
      return { success: true, data: data || [] }
    } catch (error) {
      console.error(`Error getting data from ${tableName}:`, error)
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
    }
  },

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  async truncateTable(tableName: string) {
    try {
      const { error } = await supabaseAdmin.rpc('exec_sql', {
        sql: `TRUNCATE TABLE ${tableName} RESTART IDENTITY CASCADE`
      })
      
      if (error) throw error
      return { success: true }
    } catch (error) {
      console.error(`Error truncating table ${tableName}:`, error)
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
    }
  },

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  async resetDatabase() {
    try {
      console.log('üîÑ Resetting database...')
      
      // ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const tablesResult = await this.listTables()
      if (!tablesResult.success) {
        throw new Error('Failed to list tables')
      }
      
      // ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      for (const tableName of tablesResult.tables) {
        await this.dropTable(tableName)
      }
      
      console.log('‚úÖ Database reset completed')
      return { success: true, message: 'Database reset successfully' }
      
    } catch (error) {
      console.error('Error resetting database:', error)
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
export async function setupDatabase(sqlScript: string) {
  console.log('üöÄ Starting database setup with admin privileges...')
  
  try {
    // ‡∏£‡∏±‡∏ô SQL Script
    const result = await adminOperations.executeSQL(sqlScript)
    
    if (result.success) {
      console.log('‚úÖ Database setup completed successfully!')
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
      const tablesResult = await adminOperations.listTables()
      if (tablesResult.success) {
        console.log(`üìä Created ${tablesResult.tables.length} tables:`, tablesResult.tables)
      }
      
      return {
        success: true,
        message: `Database setup completed. ${result.summary}`,
        tables: tablesResult.success ? tablesResult.tables : []
      }
    } else {
      console.error('‚ùå Database setup failed:', result.error)
      return {
        success: false,
        error: result.error,
        results: result.results
      }
    }
    
  } catch (error) {
    console.error('üí• Database setup error:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }
  }
}