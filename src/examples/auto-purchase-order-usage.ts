/**
 * Auto Purchase Order Service Usage Examples
 * 
 * This file demonstrates how to use the AutoPurchaseOrderService
 * for automatic purchase order generation, supplier selection,
 * and order management workflows.
 */

import { AutoPurchaseOrderService } from '../services/auto-purchase-order.service';
import { StockAlert, AutoPurchaseOrder } from '../types/pos';

// Initialize the service
const autoPOService = new AutoPurchaseOrderService();

/**
 * Example 1: Create automatic purchase orders from stock alerts
 */
async function createAutomaticPurchaseOrdersExample() {
  console.log('=== Creating Automatic Purchase Orders ===');

  // Sample stock alerts (typically generated by inventory monitoring)
  const stockAlerts: StockAlert[] = [
    {
      id: 'alert_001',
      productId: 'prod_001',
      productName: 'Wireless Headphones',
      productCode: 'WH-001',
      currentStock: 3,
      minimumStock: 10,
      reorderPoint: 15,
      reorderQuantity: 50,
      preferredSupplierId: 'supplier_001',
      urgencyLevel: 'high',
      category: 'Electronics',
      location: 'Main Warehouse',
      averageDailySales: 2.5,
      daysOfStockRemaining: 1,
      status: 'pending',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      id: 'alert_002',
      productId: 'prod_002',
      productName: 'Bluetooth Speaker',
      productCode: 'BS-001',
      currentStock: 0,
      minimumStock: 5,
      reorderPoint: 10,
      reorderQuantity: 30,
      preferredSupplierId: 'supplier_001', // Same supplier
      urgencyLevel: 'critical',
      category: 'Electronics',
      location: 'Main Warehouse',
      averageDailySales: 1.8,
      daysOfStockRemaining: 0,
      status: 'pending',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
  ];

  try {
    // Create automatic purchase orders
    const purchaseOrders = await autoPOService.createAutomaticPurchaseOrders(stockAlerts);
    
    console.log(`Created ${purchaseOrders.length} purchase order(s):`);
    
    purchaseOrders.forEach(order => {
      console.log(`- Order ${order.orderNumber}:`);
      console.log(`  Supplier: ${order.supplier.name}`);
      console.log(`  Total Amount: $${order.totalAmount.toFixed(2)}`);
      console.log(`  Status: ${order.status}`);
      console.log(`  Items: ${order.items.length}`);
      console.log(`  Approval Required: ${order.approvalRequired ? 'Yes' : 'No'}`);
      
      order.items.forEach(item => {
        console.log(`    - ${item.productName} (${item.productCode}): ${item.quantity} units @ $${item.unitCost}`);
      });
    });

    return purchaseOrders;

  } catch (error) {
    console.error('Failed to create automatic purchase orders:', error);
    throw error;
  }
}

/**
 * Example 2: Select optimal supplier for a product
 */
async function selectOptimalSupplierExample() {
  console.log('\n=== Selecting Optimal Supplier ===');

  const productId = 'prod_001';

  try {
    // Use default selection criteria
    const defaultSupplier = await autoPOService.selectOptimalSupplier(productId);
    
    if (defaultSupplier) {
      console.log('Default selection criteria result:');
      console.log(`- Supplier: ${defaultSupplier.supplierName}`);
      console.log(`- Unit Cost: $${defaultSupplier.unitCost}`);
      console.log(`- Lead Time: ${defaultSupplier.leadTimeDays} days`);
      console.log(`- Quality Rating: ${defaultSupplier.qualityRating}/5`);
      console.log(`- Is Preferred: ${defaultSupplier.isPreferred ? 'Yes' : 'No'}`);
    }

    // Use cost-focused criteria
    const costFocusedSupplier = await autoPOService.selectOptimalSupplier(productId, {
      costWeight: 0.6,        // High weight on cost
      qualityWeight: 0.2,     // Medium weight on quality
      reliabilityWeight: 0.15, // Low weight on reliability
      leadTimeWeight: 0.05,   // Very low weight on lead time
      preferredSupplierBonus: 0.1 // Small bonus for preferred suppliers
    });

    if (costFocusedSupplier) {
      console.log('\nCost-focused selection criteria result:');
      console.log(`- Supplier: ${costFocusedSupplier.supplierName}`);
      console.log(`- Unit Cost: $${costFocusedSupplier.unitCost}`);
      console.log(`- Overall Rating: ${costFocusedSupplier.overallRating}/5`);
    }

    // Use quality-focused criteria
    const qualityFocusedSupplier = await autoPOService.selectOptimalSupplier(productId, {
      costWeight: 0.2,        // Low weight on cost
      qualityWeight: 0.5,     // High weight on quality
      reliabilityWeight: 0.25, // Medium weight on reliability
      leadTimeWeight: 0.05,   // Very low weight on lead time
      preferredSupplierBonus: 0.15 // Medium bonus for preferred suppliers
    });

    if (qualityFocusedSupplier) {
      console.log('\nQuality-focused selection criteria result:');
      console.log(`- Supplier: ${qualityFocusedSupplier.supplierName}`);
      console.log(`- Quality Rating: ${qualityFocusedSupplier.qualityRating}/5`);
      console.log(`- Reliability Rating: ${qualityFocusedSupplier.reliabilityRating}/5`);
    }

  } catch (error) {
    console.error('Failed to select optimal supplier:', error);
    throw error;
  }
}

/**
 * Example 3: Calculate optimal reorder quantities
 */
async function calculateReorderQuantityExample() {
  console.log('\n=== Calculating Reorder Quantities ===');

  const scenarios = [
    {
      name: 'Fast-moving product',
      params: {
        productId: 'prod_001',
        currentStock: 5,
        averageDailySales: 10,
        leadTimeDays: 7,
        safetyStockDays: 3,
        seasonalityFactor: 1.0
      }
    },
    {
      name: 'Slow-moving product',
      params: {
        productId: 'prod_002',
        currentStock: 20,
        averageDailySales: 2,
        leadTimeDays: 14,
        safetyStockDays: 5,
        seasonalityFactor: 0.8
      }
    },
    {
      name: 'Seasonal product (peak season)',
      params: {
        productId: 'prod_003',
        currentStock: 8,
        averageDailySales: 5,
        leadTimeDays: 10,
        safetyStockDays: 7,
        seasonalityFactor: 1.5
      }
    }
  ];

  for (const scenario of scenarios) {
    try {
      const quantity = await autoPOService.calculateReorderQuantity(scenario.params);
      
      console.log(`\n${scenario.name}:`);
      console.log(`- Current Stock: ${scenario.params.currentStock}`);
      console.log(`- Average Daily Sales: ${scenario.params.averageDailySales}`);
      console.log(`- Lead Time: ${scenario.params.leadTimeDays} days`);
      console.log(`- Safety Stock Period: ${scenario.params.safetyStockDays} days`);
      console.log(`- Seasonality Factor: ${scenario.params.seasonalityFactor}x`);
      console.log(`- Calculated Reorder Quantity: ${quantity} units`);
      
      // Calculate some additional insights
      const demandDuringLeadTime = scenario.params.averageDailySales * scenario.params.leadTimeDays * scenario.params.seasonalityFactor;
      const safetyStock = scenario.params.averageDailySales * scenario.params.safetyStockDays;
      
      console.log(`- Demand during lead time: ${Math.ceil(demandDuringLeadTime)} units`);
      console.log(`- Safety stock: ${Math.ceil(safetyStock)} units`);
      
    } catch (error) {
      console.error(`Failed to calculate reorder quantity for ${scenario.name}:`, error);
    }
  }
}

/**
 * Example 4: Check approval requirements
 */
async function checkApprovalRequirementExample() {
  console.log('\n=== Checking Approval Requirements ===');

  const purchaseOrderScenarios = [
    {
      name: 'Small order',
      order: {
        totalAmount: 500,
        stockAlertIds: ['alert_001']
      }
    },
    {
      name: 'Large order',
      order: {
        totalAmount: 15000,
        stockAlertIds: ['alert_001', 'alert_002', 'alert_003']
      }
    },
    {
      name: 'Medium order',
      order: {
        totalAmount: 2500,
        stockAlertIds: ['alert_001', 'alert_002']
      }
    }
  ];

  for (const scenario of purchaseOrderScenarios) {
    try {
      const approvalCheck = await autoPOService.checkApprovalRequirement(scenario.order);
      
      console.log(`\n${scenario.name} ($${scenario.order.totalAmount}):`);
      console.log(`- Requires Approval: ${approvalCheck.requiresApproval ? 'Yes' : 'No'}`);
      
      if (approvalCheck.requiresApproval) {
        console.log(`- Applicable Rules: ${approvalCheck.applicableRules.length}`);
        console.log(`- Required Approvers: ${approvalCheck.requiredApprovers.join(', ')}`);
        
        approvalCheck.applicableRules.forEach(rule => {
          console.log(`  - Rule: ${rule.name} (${rule.condition} ${rule.operator} ${rule.value})`);
        });
      }
      
    } catch (error) {
      console.error(`Failed to check approval requirement for ${scenario.name}:`, error);
    }
  }
}

/**
 * Example 5: Manage purchase order workflow
 */
async function managePurchaseOrderWorkflowExample() {
  console.log('\n=== Managing Purchase Order Workflow ===');

  try {
    // First, create a purchase order
    const stockAlerts: StockAlert[] = [{
      id: 'workflow_alert_001',
      productId: 'prod_workflow',
      productName: 'Workflow Test Product',
      productCode: 'WTP-001',
      currentStock: 2,
      minimumStock: 10,
      reorderPoint: 15,
      reorderQuantity: 100,
      preferredSupplierId: 'supplier_workflow',
      urgencyLevel: 'high',
      category: 'Test',
      location: 'Test Warehouse',
      averageDailySales: 3,
      daysOfStockRemaining: 1,
      status: 'pending',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }];

    const orders = await autoPOService.createAutomaticPurchaseOrders(stockAlerts);
    
    if (orders.length === 0) {
      console.log('No orders created for workflow example');
      return;
    }

    const orderId = orders[0].id;
    console.log(`Created order ${orders[0].orderNumber} for workflow demonstration`);

    // Check initial workflow status
    let workflowStatus = await autoPOService.getPurchaseOrderWorkflowStatus(orderId);
    console.log(`\nInitial Status: ${workflowStatus.currentStatus}`);
    console.log(`Approval Required: ${workflowStatus.approvalRequired ? 'Yes' : 'No'}`);

    // Simulate workflow progression
    const workflowSteps = [
      { status: 'pending_approval' as const, user: 'manager_001', comment: 'Reviewing order details' },
      { status: 'approved' as const, user: 'manager_001', comment: 'Approved - urgent stock needed' },
      { status: 'sent' as const, user: 'purchasing_001', comment: 'Sent to supplier via email' },
      { status: 'confirmed' as const, user: 'supplier_system', comment: 'Supplier confirmed order' }
    ];

    for (const step of workflowSteps) {
      console.log(`\nUpdating status to: ${step.status}`);
      
      workflowStatus = await autoPOService.updatePurchaseOrderStatus(
        orderId,
        step.status,
        step.user,
        step.comment
      );
      
      console.log(`- Current Status: ${workflowStatus.currentStatus}`);
      console.log(`- Workflow Steps Completed: ${workflowStatus.workflowSteps.filter(s => s.status === 'completed').length}`);
      
      if (workflowStatus.approvers.length > 0) {
        console.log('- Approvers:');
        workflowStatus.approvers.forEach(approver => {
          console.log(`  - ${approver.userName} (${approver.role}): ${approver.status}`);
        });
      }
    }

  } catch (error) {
    console.error('Failed to manage purchase order workflow:', error);
    throw error;
  }
}

/**
 * Example 6: Retrieve and filter purchase orders
 */
async function retrievePurchaseOrdersExample() {
  console.log('\n=== Retrieving Purchase Orders ===');

  try {
    // Get all draft orders
    const draftOrders = await autoPOService.getPurchaseOrdersByStatus('draft');
    console.log(`Found ${draftOrders.length} draft orders`);

    // Get orders requiring approval
    const approvalOrders = await autoPOService.getPurchaseOrdersByStatus('pending_approval');
    console.log(`Found ${approvalOrders.length} orders requiring approval`);

    // Get orders with filters
    const filteredOrders = await autoPOService.getPurchaseOrdersByStatus(undefined, {
      dateFrom: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // Last 7 days
      dateTo: new Date().toISOString(),
      approvalRequired: true
    });
    console.log(`Found ${filteredOrders.length} orders from last 7 days requiring approval`);

    // Display summary of recent orders
    if (filteredOrders.length > 0) {
      console.log('\nRecent Orders Summary:');
      filteredOrders.forEach(order => {
        console.log(`- ${order.orderNumber}: ${order.supplier.name} - $${order.totalAmount.toFixed(2)} (${order.status})`);
      });
    }

  } catch (error) {
    console.error('Failed to retrieve purchase orders:', error);
    throw error;
  }
}

/**
 * Main function to run all examples
 */
async function runAllExamples() {
  console.log('🚀 Auto Purchase Order Service Examples\n');

  try {
    await createAutomaticPurchaseOrdersExample();
    await selectOptimalSupplierExample();
    await calculateReorderQuantityExample();
    await checkApprovalRequirementExample();
    await managePurchaseOrderWorkflowExample();
    await retrievePurchaseOrdersExample();

    console.log('\n✅ All examples completed successfully!');

  } catch (error) {
    console.error('\n❌ Example execution failed:', error);
  }
}

// Export functions for individual use
export {
  createAutomaticPurchaseOrdersExample,
  selectOptimalSupplierExample,
  calculateReorderQuantityExample,
  checkApprovalRequirementExample,
  managePurchaseOrderWorkflowExample,
  retrievePurchaseOrdersExample,
  runAllExamples
};

// Run examples if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runAllExamples();
}