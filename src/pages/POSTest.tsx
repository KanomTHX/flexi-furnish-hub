import React, { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  ShoppingCart, 
  Package, 
  Users, 
  CreditCard,
  CheckCircle, 
  AlertTriangle,
  Play,
  RotateCcw,
  Eye
} from 'lucide-react'
import { usePOS } from '@/hooks/usePOS'
import { mockProducts } from '@/data/mockProducts'
import { useToast } from '@/hooks/use-toast'

export default function POSTest() {
  const { state, actions } = usePOS()
  const { toast } = useToast()
  const [testResults, setTestResults] = useState<any[]>([])

  const runTest = (testName: string, testFn: () => boolean, description: string) => {
    try {
      const result = testFn()
      const testResult = {
        name: testName,
        description,
        passed: result,
        timestamp: new Date().toLocaleTimeString()
      }
      setTestResults(prev => [...prev, testResult])
      
      if (result) {
        toast({
          title: `‚úÖ ${testName}`,
          description: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô",
        })
      } else {
        toast({
          title: `‚ùå ${testName}`,
          description: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô",
          variant: "destructive"
        })
      }
      
      return result
    } catch (error) {
      const testResult = {
        name: testName,
        description,
        passed: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toLocaleTimeString()
      }
      setTestResults(prev => [...prev, testResult])
      
      toast({
        title: `‚ùå ${testName}`,
        description: `Error: ${testResult.error}`,
        variant: "destructive"
      })
      
      return false
    }
  }

  const testAddToCart = () => {
    const initialCartLength = state.cart.length
    const testProduct = mockProducts[0]
    actions.addToCart(testProduct)
    return state.cart.length === initialCartLength + 1
  }

  const testUpdateQuantity = () => {
    if (state.cart.length === 0) {
      actions.addToCart(mockProducts[0])
    }
    const productId = state.cart[0].product.id
    const initialQuantity = state.cart[0].quantity
    actions.updateQuantity(productId, initialQuantity + 1)
    const updatedItem = state.cart.find(item => item.product.id === productId)
    return updatedItem ? updatedItem.quantity === initialQuantity + 1 : false
  }

  const testRemoveFromCart = () => {
    if (state.cart.length === 0) {
      actions.addToCart(mockProducts[0])
    }
    const initialCartLength = state.cart.length
    const productId = state.cart[0].product.id
    actions.removeFromCart(productId)
    return state.cart.length === initialCartLength - 1
  }

  const testApplyDiscount = () => {
    if (state.cart.length === 0) {
      actions.addToCart(mockProducts[0])
    }
    const discountAmount = 100
    actions.applyDiscount(discountAmount)
    return state.discount === discountAmount
  }

  const testCalculateTotals = () => {
    actions.clearCart()
    actions.addToCart(mockProducts[0], 2) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 2 ‡∏ä‡∏¥‡πâ‡∏ô
    
    const expectedSubtotal = mockProducts[0].price * 2
    const expectedTax = (expectedSubtotal - state.discount) * 0.07
    const expectedTotal = expectedSubtotal - state.discount + expectedTax
    
    return Math.abs(state.subtotal - expectedSubtotal) < 0.01 &&
           Math.abs(state.total - expectedTotal) < 0.01
  }

  const testSetCustomer = () => {
    const testCustomer = {
      id: 'test-customer',
      name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      phone: '081-234-5678'
    }
    actions.setCustomer(testCustomer)
    return state.customer?.id === testCustomer.id
  }

  const testSetPaymentMethod = () => {
    const testPaymentMethod = {
      id: 'cash',
      name: '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
      type: 'cash' as const,
      icon: 'üíµ'
    }
    actions.setPaymentMethod(testPaymentMethod)
    return state.paymentMethod?.id === testPaymentMethod.id
  }

  const testClearCart = () => {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    actions.addToCart(mockProducts[0])
    actions.setCustomer({ id: 'test', name: 'Test Customer' })
    actions.applyDiscount(50)
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    actions.clearCart()
    
    return state.cart.length === 0 && 
           state.customer === undefined && 
           state.discount === 0
  }

  const runAllTests = () => {
    setTestResults([])
    
    // ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠
    setTimeout(() => runTest('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤', testAddToCart, '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤'), 100)
    setTimeout(() => runTest('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', testUpdateQuantity, '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤'), 200)
    setTimeout(() => runTest('‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤', testRemoveFromCart, '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤'), 300)
    setTimeout(() => runTest('‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î', testApplyDiscount, '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'), 400)
    setTimeout(() => runTest('‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°', testCalculateTotals, '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ‡∏†‡∏≤‡∏©‡∏µ ‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥'), 500)
    setTimeout(() => runTest('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', testSetCustomer, '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢'), 600)
    setTimeout(() => runTest('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', testSetPaymentMethod, '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'), 700)
    setTimeout(() => runTest('‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤', testClearCart, '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'), 800)
  }

  const clearResults = () => {
    setTestResults([])
    actions.clearCart()
  }

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('th-TH', {
      style: 'currency',
      currency: 'THB',
      minimumFractionDigits: 0
    }).format(price)
  }

  const passedTests = testResults.filter(test => test.passed).length
  const totalTests = testResults.length

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold flex items-center justify-center gap-2">
          <ShoppingCart className="h-8 w-8 text-blue-600" />
          ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö POS
        </h1>
        <p className="text-muted-foreground">
          ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∏‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </p>
      </div>

      {/* Test Controls */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Play className="h-5 w-5" />
            ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
          </CardTitle>
          <CardDescription>
            ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö POS
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex gap-3">
            <Button onClick={runAllTests} className="flex items-center gap-2">
              <Play className="h-4 w-4" />
              ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </Button>
            <Button variant="outline" onClick={clearResults} className="flex items-center gap-2">
              <RotateCcw className="h-4 w-4" />
              ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            </Button>
            <Button variant="outline" onClick={() => actions.clearCart()} className="flex items-center gap-2">
              <RotateCcw className="h-4 w-4" />
              ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
            </Button>
          </div>
          
          {testResults.length > 0 && (
            <div className="mt-4 p-3 bg-muted rounded-lg">
              <div className="flex items-center gap-2">
                {passedTests === totalTests ? (
                  <CheckCircle className="h-5 w-5 text-green-600" />
                ) : (
                  <AlertTriangle className="h-5 w-5 text-yellow-600" />
                )}
                <span className="font-medium">
                  ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {passedTests}/{totalTests} ‡∏ú‡πà‡∏≤‡∏ô
                </span>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Tabs defaultValue="status" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="status">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</TabsTrigger>
          <TabsTrigger value="cart">‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</TabsTrigger>
          <TabsTrigger value="products">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</TabsTrigger>
          <TabsTrigger value="results">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</TabsTrigger>
        </TabsList>

        <TabsContent value="status" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</CardTitle>
                <ShoppingCart className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{state.cart.length}</div>
                <p className="text-xs text-muted-foreground">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏¢‡πà‡∏≠‡∏¢</CardTitle>
                <Package className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{formatPrice(state.subtotal)}</div>
                <p className="text-xs text-muted-foreground">‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î</CardTitle>
                <CreditCard className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-green-600">{formatPrice(state.discount)}</div>
                <p className="text-xs text-muted-foreground">‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</CardTitle>
                <CheckCircle className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-blue-600">{formatPrice(state.total)}</div>
                <p className="text-xs text-muted-foreground">‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ 7%</p>
              </CardContent>
            </Card>
          </div>

          {/* Customer and Payment Info */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="h-5 w-5" />
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                </CardTitle>
              </CardHeader>
              <CardContent>
                {state.customer ? (
                  <div className="space-y-2">
                    <p><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {state.customer.name}</p>
                    {state.customer.phone && <p><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå:</strong> {state.customer.phone}</p>}
                    {state.customer.email && <p><strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> {state.customer.email}</p>}
                  </div>
                ) : (
                  <p className="text-muted-foreground">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CreditCard className="h-5 w-5" />
                  ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                </CardTitle>
              </CardHeader>
              <CardContent>
                {state.paymentMethod ? (
                  <div className="flex items-center gap-2">
                    <span className="text-2xl">{state.paymentMethod.icon}</span>
                    <span>{state.paymentMethod.name}</span>
                  </div>
                ) : (
                  <p className="text-muted-foreground">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</p>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="cart" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</CardTitle>
              <CardDescription>
                ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
              </CardDescription>
            </CardHeader>
            <CardContent>
              {state.cart.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  <ShoppingCart className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</p>
                  <p className="text-sm">‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {state.cart.map((item, index) => (
                    <div key={item.product.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex-1">
                        <h4 className="font-medium">{item.product.name}</h4>
                        <p className="text-sm text-muted-foreground">SKU: {item.product.sku}</p>
                        <p className="text-sm">‡∏£‡∏≤‡∏Ñ‡∏≤: {formatPrice(item.unitPrice)}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-medium">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.quantity}</p>
                        <p className="font-bold text-blue-600">{formatPrice(item.totalPrice)}</p>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="products" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</CardTitle>
              <CardDescription>
                ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {mockProducts.slice(0, 6).map((product) => (
                  <div key={product.id} className="border rounded-lg p-4">
                    <div className="space-y-2">
                      <h4 className="font-medium">{product.name}</h4>
                      <p className="text-sm text-muted-foreground">SKU: {product.sku}</p>
                      <div className="flex items-center justify-between">
                        <span className="font-bold text-blue-600">{formatPrice(product.price)}</span>
                        <Badge variant={product.stock > 10 ? "default" : "secondary"}>
                          ‡∏™‡∏ï‡πá‡∏≠‡∏Å: {product.stock}
                        </Badge>
                      </div>
                      <Button
                        size="sm"
                        onClick={() => actions.addToCart(product)}
                        className="w-full"
                      >
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="results" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</CardTitle>
              <CardDescription>
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠
              </CardDescription>
            </CardHeader>
            <CardContent>
              {testResults.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  <Eye className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</p>
                  <p className="text-sm">‡∏Ñ‡∏•‡∏¥‡∏Å "‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {testResults.map((test, index) => (
                    <Alert key={index} variant={test.passed ? "default" : "destructive"}>
                      <div className="flex items-center gap-2">
                        {test.passed ? (
                          <CheckCircle className="h-4 w-4 text-green-600" />
                        ) : (
                          <AlertTriangle className="h-4 w-4" />
                        )}
                        <div className="flex-1">
                          <AlertDescription>
                            <div className="flex items-center justify-between">
                              <div>
                                <strong>{test.name}</strong>
                                <p className="text-sm mt-1">{test.description}</p>
                                {test.error && (
                                  <p className="text-sm text-red-600 mt-1">Error: {test.error}</p>
                                )}
                              </div>
                              <div className="text-right">
                                <Badge variant={test.passed ? "default" : "destructive"}>
                                  {test.passed ? "‡∏ú‡πà‡∏≤‡∏ô" : "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"}
                                </Badge>
                                <p className="text-xs text-muted-foreground mt-1">{test.timestamp}</p>
                              </div>
                            </div>
                          </AlertDescription>
                        </div>
                      </div>
                    </Alert>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}