name: Comprehensive Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Run E2E tests
      run: npm run test:e2e
      continue-on-error: true
      
    - name: Run performance tests
      run: npm run test:performance
      continue-on-error: true
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Run comprehensive test suite
      run: npx tsx src/test/scripts/runAllTests.ts --output-dir ./test-results
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
        retention-days: 30
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = './test-results/comprehensive-report.json';
          
          if (fs.existsSync(path)) {
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const summary = report.summary;
            
            const comment = `## 🧪 Test Results Summary
            
            | Metric | Value | Status |
            |--------|-------|--------|
            | Total Tests | ${summary.totalTests} | ✅ |
            | Passed Tests | ${summary.totalPassed} | ${summary.totalFailed === 0 ? '✅' : '❌'} |
            | Failed Tests | ${summary.totalFailed} | ${summary.totalFailed === 0 ? '✅' : '❌'} |
            | Coverage | ${summary.overallCoverage.toFixed(1)}% | ${summary.overallCoverage >= 80 ? '✅' : '⚠️'} |
            | Duration | ${(summary.totalDuration / 1000).toFixed(1)}s | ✅ |
            
            ### Test Suites
            ${summary.results.map(r => `- ${r.passed ? '✅' : '❌'} **${r.name}**: ${r.passedCount}/${r.testCount} tests passed`).join('\n')}
            
            ### Quality Gates
            - Coverage Threshold (≥80%): ${summary.overallCoverage >= 80 ? '✅ PASSED' : '❌ FAILED'}
            - All Tests Passing: ${summary.totalFailed === 0 ? '✅ PASSED' : '❌ FAILED'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  quality-gates:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results-20.x
        path: ./test-results
        
    - name: Check quality gates
      run: |
        if [ -f "./test-results/comprehensive-report.json" ]; then
          echo "Checking quality gates..."
          
          # Extract metrics from report
          COVERAGE=$(cat ./test-results/comprehensive-report.json | jq -r '.summary.overallCoverage')
          FAILED_TESTS=$(cat ./test-results/comprehensive-report.json | jq -r '.summary.totalFailed')
          
          echo "Coverage: $COVERAGE%"
          echo "Failed Tests: $FAILED_TESTS"
          
          # Check coverage threshold
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "✅ Coverage threshold met"
          else
            echo "❌ Coverage threshold not met"
            exit 1
          fi
          
          # Check test failures
          if [ "$FAILED_TESTS" -eq "0" ]; then
            echo "✅ All tests passed"
          else
            echo "❌ Some tests failed"
            exit 1
          fi
          
          echo "🎉 All quality gates passed!"
        else
          echo "❌ Test results not found"
          exit 1
        fi

  notify:
    runs-on: ubuntu-latest
    needs: [test, quality-gates]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.quality-gates.result == 'success'
      run: |
        echo "🎉 All tests passed and quality gates met!"
        # Add notification logic here (Slack, email, etc.)
        
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.quality-gates.result == 'failure'
      run: |
        echo "💥 Tests failed or quality gates not met!"
        # Add notification logic here (Slack, email, etc.)