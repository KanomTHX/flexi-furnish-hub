// ===================================================================
// DATABASE SCHEMA CHECKER
// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô Supabase
// ===================================================================

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

// ‡πÇ‡∏´‡∏•‡∏î environment variables
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Missing Supabase credentials in .env.local');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// ===================================================================
// HELPER FUNCTIONS
// ===================================================================

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
async function getAllTables() {
    try {
        // ‡πÉ‡∏ä‡πâ SQL query ‡∏ú‡πà‡∏≤‡∏ô rpc ‡∏´‡∏£‡∏∑‡∏≠ raw query
        const { data, error } = await supabase.rpc('get_table_names');

        if (error && error.code === '42883') {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ function ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
            const tables = [
                'branches', 'employees', 'customers', 'products', 'product_categories',
                'sales_transactions', 'accounting_transactions', 'chart_of_accounts',
                'installment_plans', 'installment_contracts', 'installment_payments',
                'guarantors', 'contract_history', 'contract_documents'
            ];

            const existingTables = [];
            for (const table of tables) {
                const exists = await tableExists(table);
                if (exists) existingTables.push(table);
            }

            return existingTables;
        }

        if (error) throw error;
        return data || [];
    } catch (error) {
        console.error('Error fetching tables:', error);
        // Fallback: ‡∏•‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ
        const commonTables = [
            'branches', 'employees', 'customers', 'products',
            'installment_plans', 'installment_contracts', 'installment_payments'
        ];

        const existingTables = [];
        for (const table of commonTables) {
            const exists = await tableExists(table);
            if (exists) existingTables.push(table);
        }

        return existingTables;
    }
}

/**
 * ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
 */
async function getTableColumns(tableName) {
    try {
        // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
        const { data, error } = await supabase
            .from(tableName)
            .select('*')
            .limit(1);

        if (error) {
            console.warn(`Cannot access table ${tableName}:`, error.message);
            return [];
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å object
        if (data && data.length > 0) {
            const columns = Object.keys(data[0]).map(key => ({
                column_name: key,
                data_type: typeof data[0][key],
                is_nullable: 'UNKNOWN',
                column_default: null
            }));
            return columns;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π error
        try {
            await supabase.from(tableName).insert({}).select();
        } catch (insertError) {
            // Parse error message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
            console.log(`Insert error for ${tableName}:`, insertError.message);
        }

        return [];
    } catch (error) {
        console.error(`Error fetching columns for ${tableName}:`, error);
        return [];
    }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• foreign keys
 */
async function getForeignKeys(tableName) {
    try {
        const { data, error } = await supabase.rpc('get_foreign_keys', {
            table_name: tableName
        });

        if (error && error.code !== '42883') { // Function doesn't exist
            throw error;
        }

        return data || [];
    } catch (error) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ function ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
        try {
            const { data, error: queryError } = await supabase
                .from('information_schema.key_column_usage')
                .select(`
          column_name,
          referenced_table_name,
          referenced_column_name
        `)
                .eq('table_schema', 'public')
                .eq('table_name', tableName)
                .not('referenced_table_name', 'is', null);

            if (queryError) throw queryError;
            return data || [];
        } catch (fallbackError) {
            console.warn(`Could not fetch foreign keys for ${tableName}`);
            return [];
        }
    }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
async function tableExists(tableName) {
    try {
        const { data, error } = await supabase
            .from(tableName)
            .select('*')
            .limit(1);

        return !error;
    } catch (error) {
        return false;
    }
}

// ===================================================================
// MAIN CHECKING FUNCTIONS
// ===================================================================

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö installments
 */
async function checkInstallmentTables() {
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Installments...\n');

    const installmentTables = [
        'customers',
        'installment_plans',
        'installment_contracts',
        'installment_payments',
        'guarantors',
        'contract_history',
        'contract_documents'
    ];

    const results = {};

    for (const tableName of installmentTables) {
        console.log(`üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ${tableName}`);

        const exists = await tableExists(tableName);

        if (exists) {
            console.log(`  ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);

            const columns = await getTableColumns(tableName);
            const foreignKeys = await getForeignKeys(tableName);

            results[tableName] = {
                exists: true,
                columns: columns,
                foreignKeys: foreignKeys
            };

            console.log(`  üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ${columns.length}`);

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            const importantColumns = columns.filter(col =>
                col.column_name.includes('id') ||
                col.column_name.includes('name') ||
                col.column_name.includes('customer') ||
                col.column_name.includes('guarantor')
            );

            if (importantColumns.length > 0) {
                console.log(`  üîë ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:`);
                importantColumns.forEach(col => {
                    console.log(`    - ${col.column_name} (${col.data_type})`);
                });
            }

        } else {
            console.log(`  ‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
            results[tableName] = {
                exists: false,
                columns: [],
                foreignKeys: []
            };
        }

        console.log('');
    }

    return results;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers
 */
async function checkCustomersTable() {
    console.log('üë§ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers...\n');

    const exists = await tableExists('customers');
    if (!exists) {
        console.log('‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
        return null;
    }

    const columns = await getTableColumns('customers');

    console.log('üìä ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers:');
    columns.forEach(col => {
        console.log(`  - ${col.column_name} (${col.data_type}) ${col.is_nullable === 'NO' ? '* Required' : ''}`);
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö installments
    const requiredColumns = [
        'id_card',
        'occupation',
        'monthly_income',
        'workplace',
        'work_address',
        'emergency_contact_name',
        'emergency_contact_phone',
        'emergency_contact_relationship'
    ];

    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö installments:');
    const missingColumns = [];

    requiredColumns.forEach(colName => {
        const exists = columns.some(col => col.column_name === colName);
        if (exists) {
            console.log(`  ‚úÖ ${colName}`);
        } else {
            console.log(`  ‚ùå ${colName} - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
            missingColumns.push(colName);
        }
    });

    return {
        exists: true,
        columns: columns,
        missingColumns: missingColumns
    };
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á installment_contracts
 */
async function checkInstallmentContractsTable() {
    console.log('\nüìÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á installment_contracts...\n');

    const exists = await tableExists('installment_contracts');
    if (!exists) {
        console.log('‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á installment_contracts ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
        return null;
    }

    const columns = await getTableColumns('installment_contracts');

    console.log('üìä ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á installment_contracts:');
    columns.forEach(col => {
        console.log(`  - ${col.column_name} (${col.data_type}) ${col.is_nullable === 'NO' ? '* Required' : ''}`);
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö customer
    const customerColumns = columns.filter(col =>
        col.column_name.includes('customer')
    );

    console.log('\nüîç ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö customer:');
    customerColumns.forEach(col => {
        console.log(`  - ${col.column_name} (${col.data_type})`);
    });

    return {
        exists: true,
        columns: columns,
        customerColumns: customerColumns
    };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
 */
function generateReport(results) {
    console.log('\n' + '='.repeat(60));
    console.log('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
    console.log('='.repeat(60));

    const existingTables = Object.keys(results).filter(table => results[table].exists);
    const missingTables = Object.keys(results).filter(table => !results[table].exists);

    console.log(`\n‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (${existingTables.length}):`, existingTables.join(', '));
    console.log(`‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (${missingTables.length}):`, missingTables.join(', '));

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á migration recommendations
    console.log('\nüîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Migration:');

    if (missingTables.length > 0) {
        console.log('\n1. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà:');
        missingTables.forEach(table => {
            console.log(`   - CREATE TABLE ${table}`);
        });
    }

    if (results.customers && results.customers.missingColumns && results.customers.missingColumns.length > 0) {
        console.log('\n2. ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers:');
        results.customers.missingColumns.forEach(col => {
            console.log(`   - ALTER TABLE customers ADD COLUMN ${col}`);
        });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö foreign key relationships
    if (results.installment_contracts && results.installment_contracts.exists) {
        const customerCols = results.installment_contracts.customerColumns;
        if (customerCols.length > 0) {
            console.log('\n3. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers:');
            customerCols.forEach(col => {
                console.log(`   - ${col.column_name} -> customers.id`);
            });
        }
    }
}

// ===================================================================
// MAIN EXECUTION
// ===================================================================

async function main() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Supabase...');
    console.log(`üì° URL: ${supabaseUrl}`);

    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ
        const { data, error } = await supabase.from('branches').select('id').limit(1);
        if (error && !error.message.includes('does not exist')) {
            throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`);
        }
        console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const allTables = await getAllTables();
        console.log(`\nüìä ‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allTables.length} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á:`, allTables.join(', '));

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö installments
        const installmentResults = await checkInstallmentTables();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        const customersResult = await checkCustomersTable();
        if (customersResult) {
            installmentResults.customers = { ...installmentResults.customers, ...customersResult };
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á installment_contracts ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        const contractsResult = await checkInstallmentContractsTable();
        if (contractsResult) {
            installmentResults.installment_contracts = { ...installmentResults.installment_contracts, ...contractsResult };
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
        generateReport(installmentResults);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
        const fs = await import('fs');
        fs.writeFileSync('database_schema_check_result.json', JSON.stringify(installmentResults, null, 2));
        console.log('\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: database_schema_check_result.json');

    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
        process.exit(1);
    }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
main().then(() => {
    console.log('\n‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    process.exit(0);
}).catch(error => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå:', error);
    process.exit(1);
});