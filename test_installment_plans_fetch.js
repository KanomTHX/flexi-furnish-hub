// ===================================================================
// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// ===================================================================

const { createClient } = require('@supabase/supabase-js');

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Supabase (‡πÉ‡∏ä‡πâ environment variables ‡∏à‡∏£‡∏¥‡∏á)
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'YOUR_SUPABASE_URL';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'YOUR_SUPABASE_KEY';
const supabase = createClient(supabaseUrl, supabaseKey);

async function testInstallmentPlansFetch() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n');

  try {
    // 1. ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
    const { data: allPlans, error: allPlansError } = await supabase
      .from('installment_plans')
      .select('*')
      .order('number_of_installments');

    if (allPlansError) {
      console.error('‚ùå Error ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', allPlansError);
      return;
    }

    console.log(`‚úÖ ‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allPlans.length} ‡πÅ‡∏ú‡∏ô`);
    allPlans.forEach((plan, index) => {
      console.log(`   ${index + 1}. ${plan.plan_name} (${plan.plan_number})`);
      console.log(`      - ID: ${plan.id} (${typeof plan.id})`);
      console.log(`      - ‡∏á‡∏ß‡∏î: ${plan.number_of_installments}`);
      console.log(`      - ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢: ${plan.interest_rate}%`);
      console.log(`      - ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå: ${plan.down_payment_percent}%`);
      console.log(`      - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≥: ${plan.requires_guarantor ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà'}`);
      console.log(`      - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${plan.is_active ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`);
      console.log('');
    });

    // 2. ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    console.log('2Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...');
    const { data: activePlans, error: activePlansError } = await supabase
      .from('installment_plans')
      .select('*')
      .eq('is_active', true)
      .order('number_of_installments');

    if (activePlansError) {
      console.error('‚ùå Error ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:', activePlansError);
      return;
    }

    console.log(`‚úÖ ‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${activePlans.length} ‡πÅ‡∏ú‡∏ô`);

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö InstallmentPlan type
    console.log('\n3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    const mappedPlans = activePlans.map(plan => ({
      id: plan.id,
      name: plan.plan_name,
      planNumber: plan.plan_number,
      months: plan.number_of_installments,
      interestRate: plan.interest_rate,
      downPaymentPercent: plan.down_payment_percent,
      processingFee: plan.processing_fee,
      minAmount: plan.min_amount,
      maxAmount: plan.max_amount,
      requiresGuarantor: plan.requires_guarantor,
      isActive: plan.is_active
    }));

    console.log('‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    mappedPlans.forEach((plan, index) => {
      console.log(`   ${index + 1}. ${plan.name}`);
      console.log(`      - ID: ${plan.id} (UUID format: ${isValidUUID(plan.id)})`);
      console.log(`      - ‡∏á‡∏ß‡∏î: ${plan.months}`);
      console.log(`      - ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢: ${plan.interestRate}%`);
      console.log(`      - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≥: ${plan.requiresGuarantor ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà'}`);
      console.log('');
    });

    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    console.log('4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)...');
    if (mappedPlans.length > 0) {
      const selectedPlan = mappedPlans[0];
      console.log(`‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô: ${selectedPlan.name}`);
      console.log(`   - Plan ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database: ${selectedPlan.id}`);
      console.log(`   - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ID: ${typeof selectedPlan.id}`);
      console.log(`   - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UUID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${isValidUUID(selectedPlan.id)}`);
      
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤
      const contractData = {
        plan_id: selectedPlan.id, // ‡πÉ‡∏ä‡πâ UUID ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        plan_name: selectedPlan.name,
        months: selectedPlan.months,
        interest_rate: selectedPlan.interestRate
      };
      
      console.log('   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ:', JSON.stringify(contractData, null, 2));
    }

    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log(`   ‚úÖ ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${allPlans.length} ‡πÅ‡∏ú‡∏ô`);
    console.log(`   ‚úÖ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${activePlans.length} ‡πÅ‡∏ú‡∏ô`);
    console.log(`   ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${mappedPlans.length} ‡πÅ‡∏ú‡∏ô`);
    console.log(`   ‚úÖ ID ‡πÄ‡∏õ‡πá‡∏ô UUID format ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${mappedPlans.every(p => isValidUUID(p.id))}`);

  } catch (error) {
    console.error('üí• Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ string ‡πÄ‡∏õ‡πá‡∏ô UUID format ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function isValidUUID(str) {
  const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  return uuidPattern.test(str);
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if (require.main === module) {
  testInstallmentPlansFetch();
}

module.exports = { testInstallmentPlansFetch };