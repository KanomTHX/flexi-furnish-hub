// ===================================================================
// FINAL STRUCTURE CHECK
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á migration ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
// ===================================================================

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
 */
async function checkRequiredColumns(tableName) {
  console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableName}...`);
  
  const requiredColumns = [];
  const optionalColumns = [];
  
  // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π required columns
  try {
    const { error } = await supabase
      .from(tableName)
      .insert({});

    if (error && error.message.includes('null value in column')) {
      // Parse error message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ required columns
      const matches = error.message.match(/null value in column "([^"]+)"/g);
      if (matches) {
        matches.forEach(match => {
          const column = match.match(/"([^"]+)"/)[1];
          requiredColumns.push(column);
          console.log(`  üîë ${column} - REQUIRED`);
        });
      }
    }
  } catch (error) {
    console.log(`  ‚ö†Ô∏è  Error checking required columns: ${error.message}`);
  }

  return { requiredColumns, optionalColumns };
}

/**
 * ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
 */
async function createTestRecord(tableName, requiredColumns) {
  console.log(`\nüß™ ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô ${tableName}...`);
  
  const testData = {};
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  requiredColumns.forEach(column => {
    if (column === 'plan_number') {
      testData[column] = 'TEST001';
    } else if (column === 'name') {
      testData[column] = '‡πÅ‡∏ú‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö';
    } else if (column === 'months') {
      testData[column] = 6;
    } else if (column === 'interest_rate') {
      testData[column] = 0;
    } else if (column === 'down_payment') {
      testData[column] = 1000;
    } else if (column === 'status') {
      testData[column] = 'active';
    } else if (column === 'branch_id') {
      testData[column] = '00000000-0000-0000-0000-000000000000';
    } else if (column.includes('created_at') || column.includes('updated_at')) {
      // ‡∏Ç‡πâ‡∏≤‡∏° timestamp columns
    } else {
      testData[column] = 'test';
    }
  });

  console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', JSON.stringify(testData, null, 2));

  try {
    const { data, error } = await supabase
      .from(tableName)
      .insert(testData)
      .select();

    if (error) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error.message);
      
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå error ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      if (error.message.includes('invalid input syntax for type uuid')) {
        console.log('üí° ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ UUID - ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ::uuid cast ‡∏´‡∏£‡∏∑‡∏≠ UUID ‡∏à‡∏£‡∏¥‡∏á');
      }
      
      return null;
    } else {
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      console.log('üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:', JSON.stringify(data[0], null, 2));
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      if (data && data.length > 0) {
        await supabase.from(tableName).delete().eq('id', data[0].id);
        console.log('üóëÔ∏è  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
      }
      
      return data[0];
    }
  } catch (error) {
    console.log('‚ùå Exception:', error.message);
    return null;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
 */
function generateCompleteMigration(tableStructure, requiredColumns) {
  console.log('\nüìù ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå...');
  
  if (!tableStructure) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡πÑ‡∏î‡πâ');
    return;
  }

  const columns = Object.keys(tableStructure);
  console.log('üìä ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', columns.join(', '));
  console.log('üîë ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:', requiredColumns.join(', '));

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á INSERT statement ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
  const insertSQL = `-- ===================================================================
-- COMPLETE MIGRATION FOR INSTALLMENT_PLANS
-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
-- ===================================================================

-- 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
${columns.includes('name') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS name VARCHAR(255);'}
${columns.includes('months') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS months INTEGER;'}
${columns.includes('down_payment_percent') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS down_payment_percent DECIMAL(5,2);'}
${columns.includes('processing_fee') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS processing_fee DECIMAL(10,2) DEFAULT 0;'}
${columns.includes('description') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS description TEXT;'}
${columns.includes('min_amount') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS min_amount DECIMAL(12,2) DEFAULT 0;'}
${columns.includes('max_amount') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS max_amount DECIMAL(12,2);'}
${columns.includes('requires_guarantor') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS requires_guarantor BOOLEAN DEFAULT FALSE;'}
${columns.includes('is_active') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE;'}

-- 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏£‡∏ß‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
DO $$
DECLARE
    default_branch_id UUID;
BEGIN
    -- ‡∏´‡∏≤ branch_id ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    SELECT id INTO default_branch_id FROM branches LIMIT 1;
    IF default_branch_id IS NULL THEN
        default_branch_id := '00000000-0000-0000-0000-000000000000'::uuid;
    END IF;
    
    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    INSERT INTO installment_plans (
        ${requiredColumns.includes('plan_number') ? 'plan_number,' : ''}
        ${columns.includes('name') ? 'name,' : ''}
        ${columns.includes('months') ? 'months,' : ''}
        interest_rate,
        ${columns.includes('down_payment') ? 'down_payment,' : ''}
        ${columns.includes('down_payment_percent') ? 'down_payment_percent,' : ''}
        ${columns.includes('processing_fee') ? 'processing_fee,' : ''}
        ${columns.includes('description') ? 'description,' : ''}
        ${columns.includes('min_amount') ? 'min_amount,' : ''}
        ${columns.includes('max_amount') ? 'max_amount,' : ''}
        ${columns.includes('requires_guarantor') ? 'requires_guarantor,' : ''}
        ${columns.includes('is_active') ? 'is_active,' : ''}
        status${requiredColumns.includes('branch_id') ? ',\n        branch_id' : ''}
    )
    SELECT * FROM (VALUES
        (${requiredColumns.includes('plan_number') ? "'PLAN003'," : ''} ${columns.includes('name') ? "'‡∏ú‡πà‡∏≠‡∏ô 0% 3 ‡∏á‡∏ß‡∏î'," : ''} ${columns.includes('months') ? '3,' : ''} 0.00, ${columns.includes('down_payment') ? '1000.00,' : ''} ${columns.includes('down_payment_percent') ? '10.00,' : ''} ${columns.includes('processing_fee') ? '200.00,' : ''} ${columns.includes('description') ? "'‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ 3 ‡∏á‡∏ß‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢'," : ''} ${columns.includes('min_amount') ? '3000,' : ''} ${columns.includes('max_amount') ? '30000,' : ''} ${columns.includes('requires_guarantor') ? 'FALSE,' : ''} ${columns.includes('is_active') ? 'TRUE,' : ''} 'active'${requiredColumns.includes('branch_id') ? ', default_branch_id' : ''}),
        (${requiredColumns.includes('plan_number') ? "'PLAN006'," : ''} ${columns.includes('name') ? "'‡∏ú‡πà‡∏≠‡∏ô 0% 6 ‡∏á‡∏ß‡∏î'," : ''} ${columns.includes('months') ? '6,' : ''} 0.00, ${columns.includes('down_payment') ? '2000.00,' : ''} ${columns.includes('down_payment_percent') ? '20.00,' : ''} ${columns.includes('processing_fee') ? '500.00,' : ''} ${columns.includes('description') ? "'‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ 6 ‡∏á‡∏ß‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢'," : ''} ${columns.includes('min_amount') ? '5000,' : ''} ${columns.includes('max_amount') ? '50000,' : ''} ${columns.includes('requires_guarantor') ? 'FALSE,' : ''} ${columns.includes('is_active') ? 'TRUE,' : ''} 'active'${requiredColumns.includes('branch_id') ? ', default_branch_id' : ''}),
        (${requiredColumns.includes('plan_number') ? "'PLAN012'," : ''} ${columns.includes('name') ? "'‡∏ú‡πà‡∏≠‡∏ô 0% 12 ‡∏á‡∏ß‡∏î'," : ''} ${columns.includes('months') ? '12,' : ''} 0.00, ${columns.includes('down_payment') ? '3000.00,' : ''} ${columns.includes('down_payment_percent') ? '30.00,' : ''} ${columns.includes('processing_fee') ? '1000.00,' : ''} ${columns.includes('description') ? "'‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ 12 ‡∏á‡∏ß‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢'," : ''} ${columns.includes('min_amount') ? '10000,' : ''} ${columns.includes('max_amount') ? '100000,' : ''} ${columns.includes('requires_guarantor') ? 'FALSE,' : ''} ${columns.includes('is_active') ? 'TRUE,' : ''} 'active'${requiredColumns.includes('branch_id') ? ', default_branch_id' : ''})
    ) AS new_plans(${requiredColumns.includes('plan_number') ? 'plan_number,' : ''} ${columns.includes('name') ? 'name,' : ''} ${columns.includes('months') ? 'months,' : ''} interest_rate, ${columns.includes('down_payment') ? 'down_payment,' : ''} ${columns.includes('down_payment_percent') ? 'down_payment_percent,' : ''} ${columns.includes('processing_fee') ? 'processing_fee,' : ''} ${columns.includes('description') ? 'description,' : ''} ${columns.includes('min_amount') ? 'min_amount,' : ''} ${columns.includes('max_amount') ? 'max_amount,' : ''} ${columns.includes('requires_guarantor') ? 'requires_guarantor,' : ''} ${columns.includes('is_active') ? 'is_active,' : ''} status${requiredColumns.includes('branch_id') ? ', branch_id' : ''})
    WHERE NOT EXISTS (
        SELECT 1 FROM installment_plans 
        WHERE ${requiredColumns.includes('plan_number') ? 'installment_plans.plan_number = new_plans.plan_number' : columns.includes('name') ? 'installment_plans.name = new_plans.name' : '1=0'}
    );
    
    RAISE NOTICE 'Added installment plans successfully';
END $$;

-- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes
CREATE INDEX IF NOT EXISTS idx_installment_plans_plan_number ON installment_plans(${requiredColumns.includes('plan_number') ? 'plan_number' : 'id'});
${columns.includes('name') ? 'CREATE INDEX IF NOT EXISTS idx_installment_plans_name ON installment_plans(name);' : ''}
${columns.includes('is_active') ? 'CREATE INDEX IF NOT EXISTS idx_installment_plans_active ON installment_plans(is_active);' : ''}

-- ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
SELECT 'Complete installment_plans migration finished!' as result;`;

  console.log('üìÑ Complete Migration Script:');
  console.log(insertSQL);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
  import('fs').then(fs => {
    fs.writeFileSync('complete_installment_plans_migration.sql', insertSQL);
    console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: complete_installment_plans_migration.sql');
  });

  return insertSQL;
}

/**
 * Main function
 */
async function main() {
  console.log('üöÄ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á migration ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå...');
  console.log(`üì° URL: ${supabaseUrl}`);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    const { data, error } = await supabase.from('installment_plans').select('id').limit(1);
    if (error && !error.message.includes('does not exist')) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`);
    }
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const { requiredColumns } = await checkRequiredColumns('installment_plans');
    
    // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const tableStructure = await createTestRecord('installment_plans', requiredColumns);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    generateCompleteMigration(tableStructure, requiredColumns);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
main().then(() => {
  console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå:', error);
  process.exit(1);
});