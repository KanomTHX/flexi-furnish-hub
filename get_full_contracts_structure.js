import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  'https://hartshwcchbsnmbrjdyn.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhcnRzaHdjY2hic25tYnJqZHluIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDAzNzU3NCwiZXhwIjoyMDY5NjEzNTc0fQ.EuWZV7-3o9GsDPGKAS4L4L3t7GKQkn7kfnoHpc9IzOw'
);

async function getFullContractsStructure() {
  console.log('üîç ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á installment_contracts');
  console.log('================================================================');

  let currentData = {
    status: 'pending',
    contract_number: 'TEST-001'
  };

  let attempts = 0;
  const maxAttempts = 10;

  while (attempts < maxAttempts) {
    attempts++;
    console.log(`\nAttempt ${attempts}: ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...`);
    
    try {
      const { data, error } = await supabase
        .from('installment_contracts')
        .insert(currentData)
        .select();

      if (error) {
        console.log(`‚ùå Error: ${error.message}`);
        
        // ‡∏ñ‡πâ‡∏≤ error ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö NOT NULL constraint
        if (error.message.includes('null value in column')) {
          const match = error.message.match(/null value in column "([^"]+)"/);
          if (match) {
            const missingColumn = match[1];
            console.log(`‚ö†Ô∏è  ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ${missingColumn}`);
            
            // ‡πÄ‡∏î‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            let value;
            if (missingColumn.includes('id')) {
              value = '00000000-0000-0000-0000-000000000001';
            } else if (missingColumn.includes('amount')) {
              value = 50000;
            } else if (missingColumn.includes('date')) {
              value = new Date().toISOString().split('T')[0];
            } else if (missingColumn.includes('number')) {
              value = 1;
            } else {
              value = 'default-value';
            }
            
            currentData[missingColumn] = value;
            console.log(`   ‡πÄ‡∏û‡∏¥‡πà‡∏° ${missingColumn}: ${value}`);
            continue; // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          }
        } else if (error.message.includes('violates foreign key constraint')) {
          console.log('‚ö†Ô∏è  Foreign key constraint - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á');
          break;
        } else {
          console.log('‚ö†Ô∏è  Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
          break;
        }
      } else {
        console.log('‚úÖ Insert ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        if (data && data[0]) {
          console.log('\nüìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏° installment_contracts:');
          Object.keys(data[0]).forEach(col => {
            const value = data[0][col];
            const type = typeof value;
            console.log(`   - ${col}: ${type} = ${value}`);
          });
          
          // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
          await supabase
            .from('installment_contracts')
            .delete()
            .eq('id', data[0].id);
          console.log('üóëÔ∏è  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
        }
        break; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      }
    } catch (err) {
      console.log(`‚ùå Exception: ${err.message}`);
      break;
    }
  }

  if (attempts >= maxAttempts) {
    console.log('‚ö†Ô∏è  ‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß');
  }

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
  console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:');
  console.log('================================================================');
  console.log('‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (NOT NULL):');
  Object.keys(currentData).forEach(key => {
    console.log(`   - ${key}: ${currentData[key]}`);
  });
}

getFullContractsStructure();