require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function verifyInstallmentPlans() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { data: allTables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public');
    
    if (tablesError) {
      console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏î‡πâ, ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...');
    } else {
      console.log('üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', allTables?.map(t => t.table_name).join(', '));
    }
    
    const { data: plans, error } = await supabase
      .from('installment_plans')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Error:', error);
      console.log('üîç ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á...');
      
      // ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á plans
      const { data: plansData, error: plansError } = await supabase
        .from('plans')
        .select('*');
      
      if (!plansError && plansData) {
        console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'plans': ${plansData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        plansData.forEach((plan, index) => {
          console.log(`${index + 1}. ${JSON.stringify(plan, null, 2)}`);
        });
      }
      
      return;
    }

    console.log(`\nüìä ‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞: ${plans?.length || 0} ‡πÅ‡∏ú‡∏ô\n`);
    
    if (!plans || plans.length === 0) {
      console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á installment_plans');
      return;
    }
    
    plans.forEach((plan, index) => {
      console.log(`${index + 1}. ${plan.name}`);
      console.log(`   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î: ${plan.number_of_installments} ‡∏á‡∏ß‡∏î`);
      console.log(`   - ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢: ${plan.interest_rate}%`);
      console.log(`   - ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå: ${plan.down_payment_percent}%`);
      console.log(`   - ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: ‡∏ø${plan.processing_fee?.toLocaleString() || 0}`);
      console.log(`   - ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø${plan.min_amount?.toLocaleString() || 0} - ‡∏ø${plan.max_amount?.toLocaleString() || 0}`);
      console.log(`   - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≥: ${plan.requires_guarantor ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
      console.log(`   - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${plan.is_active ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`);
      console.log('');
    });
    
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
}

verifyInstallmentPlans();