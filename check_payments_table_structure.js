import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  'https://hartshwcchbsnmbrjdyn.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhcnRzaHdjY2hic25tYnJqZHluIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDAzNzU3NCwiZXhwIjoyMDY5NjEzNTc0fQ.EuWZV7-3o9GsDPGKAS4L4L3t7GKQkn7kfnoHpc9IzOw'
);

async function checkPaymentsTableStructure() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á installment_payments');
  console.log('================================================================');

  try {
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    const { data, error } = await supabase
      .from('installment_payments')
      .select('*')
      .limit(1);

    if (error) {
      console.log('‚ùå Error:', error.message);
      return;
    }

    if (data && data.length > 0) {
      console.log('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
      const columns = Object.keys(data[0]);
      columns.forEach(col => {
        console.log(`   - ${col}: ${typeof data[0][col]} (value: ${data[0][col]})`);
      });
    } else {
      console.log('üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á - ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');
      
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏´‡∏ô‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
      const testData = {
        contract_id: '00000000-0000-0000-0000-000000000001',
        installment_number: 1,
        due_date: new Date().toISOString().split('T')[0],
        amount: 5000,
        principal_amount: 4500,
        interest_amount: 500,
        status: 'pending'
      };

      const { data: insertData, error: insertError } = await supabase
        .from('installment_payments')
        .insert(testData)
        .select();

      if (insertError) {
        console.log('‚ùå Insert Error:', insertError.message);
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå error
        if (insertError.message.includes('column') && insertError.message.includes('does not exist')) {
          const match = insertError.message.match(/column "([^"]+)" does not exist/);
          if (match) {
            console.log(`‚ö†Ô∏è  ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: ${match[1]}`);
          }
        }
      } else {
        console.log('‚úÖ Insert ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
        if (insertData && insertData[0]) {
          const columns = Object.keys(insertData[0]);
          columns.forEach(col => {
            console.log(`   - ${col}: ${typeof insertData[0][col]}`);
          });
          
          // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
          await supabase
            .from('installment_payments')
            .delete()
            .eq('id', insertData[0].id);
          console.log('üóëÔ∏è  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
        }
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ
    console.log('\nüìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:');
    const requiredColumns = [
      'id',
      'contract_id', // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô installment_contract_id
      'installment_number',
      'due_date',
      'amount',
      'principal_amount',
      'interest_amount',
      'status',
      'paid_date',
      'paid_amount',
      'payment_method',
      'receipt_number',
      'late_fee',
      'discount',
      'notes',
      'processed_by',
      'created_at',
      'updated_at',
      'branch_id'
    ];

    for (const column of requiredColumns) {
      try {
        const testData = { [column]: null };
        const { error } = await supabase
          .from('installment_payments')
          .insert(testData);

        if (error && error.message.includes(`Could not find the '${column}' column`)) {
          console.log(`‚ùå ${column}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
        } else if (error && error.message.includes(`column "${column}" does not exist`)) {
          console.log(`‚ùå ${column}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
        } else {
          console.log(`‚úÖ ${column}: ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
        }
      } catch (err) {
        console.log(`üîç ${column}: ${err.message}`);
      }
    }

  } catch (err) {
    console.error('Error:', err.message);
  }
}

checkPaymentsTableStructure();