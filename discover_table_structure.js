// ===================================================================
// DISCOVER TABLE STRUCTURE
// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
// ===================================================================

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * ‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
 */
async function discoverColumns(tableName) {
  console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableName}...`);
  
  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ
  const possibleColumns = [
    // ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô
    'name', 'plan_name', 'title', 'label',
    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î
    'months', 'installments', 'periods', 'duration',
    // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢
    'interest_rate', 'rate', 'annual_rate',
    // ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå
    'down_payment_percent', 'down_payment', 'deposit_percent',
    // ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
    'processing_fee', 'fee', 'service_fee',
    // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
    'description', 'details', 'note',
    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    'is_active', 'active', 'status', 'enabled',
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
    'id', 'created_at', 'updated_at', 'branch_id'
  ];

  const existingColumns = [];
  const nonExistingColumns = [];

  for (const column of possibleColumns) {
    try {
      // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ
      const testData = {};
      
      // ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
      if (column.includes('id')) {
        testData[column] = '00000000-0000-0000-0000-000000000000';
      } else if (column.includes('percent') || column.includes('rate')) {
        testData[column] = 10.5;
      } else if (column.includes('months') || column.includes('installments')) {
        testData[column] = 6;
      } else if (column.includes('fee')) {
        testData[column] = 500;
      } else if (column.includes('active') || column.includes('enabled')) {
        testData[column] = true;
      } else if (column.includes('created_at') || column.includes('updated_at')) {
        testData[column] = new Date().toISOString();
      } else {
        testData[column] = 'test';
      }

      const { error } = await supabase
        .from(tableName)
        .insert(testData);

      if (error) {
        if (error.message.includes(`Could not find the '${column}' column`)) {
          nonExistingColumns.push(column);
          console.log(`  ‚ùå ${column} - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
        } else if (error.message.includes('null value in column')) {
          // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô required
          existingColumns.push({ name: column, required: true });
          console.log(`  ‚úÖ ${column} - ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (required)`);
        } else {
          // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡∏°‡∏µ error ‡∏≠‡∏∑‡πà‡∏ô
          existingColumns.push({ name: column, required: false });
          console.log(`  ‚úÖ ${column} - ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (${error.message.substring(0, 50)}...)`);
        }
      } else {
        // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à = ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        existingColumns.push({ name: column, required: false });
        console.log(`  ‚úÖ ${column} - ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (optional)`);
      }

      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ rate limit
      await new Promise(resolve => setTimeout(resolve, 100));

    } catch (error) {
      console.log(`  ‚ö†Ô∏è  ${column} - Error: ${error.message}`);
    }
  }

  return { existingColumns, nonExistingColumns };
}

/**
 * ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö
 */
async function createTestRecord(tableName, existingColumns) {
  console.log(`\nüß™ ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô ${tableName}...`);
  
  const testData = {};
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ
  existingColumns.forEach(col => {
    const columnName = col.name;
    
    if (columnName.includes('name') || columnName.includes('title')) {
      testData[columnName] = '‡πÅ‡∏ú‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö';
    } else if (columnName.includes('months') || columnName.includes('installments')) {
      testData[columnName] = 6;
    } else if (columnName.includes('rate')) {
      testData[columnName] = 0;
    } else if (columnName.includes('percent')) {
      testData[columnName] = 20;
    } else if (columnName.includes('fee')) {
      testData[columnName] = 500;
    } else if (columnName.includes('description')) {
      testData[columnName] = '‡πÅ‡∏ú‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö 6 ‡∏á‡∏ß‡∏î';
    } else if (columnName.includes('active') || columnName.includes('enabled')) {
      testData[columnName] = true;
    } else if (columnName === 'id') {
      // ‡∏Ç‡πâ‡∏≤‡∏° id ‡πÉ‡∏´‡πâ auto generate
    } else if (columnName.includes('created_at') || columnName.includes('updated_at')) {
      // ‡∏Ç‡πâ‡∏≤‡∏° timestamp ‡πÉ‡∏´‡πâ auto generate
    } else {
      testData[columnName] = 'test';
    }
  });

  console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', JSON.stringify(testData, null, 2));

  try {
    const { data, error } = await supabase
      .from(tableName)
      .insert(testData)
      .select();

    if (error) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error.message);
      return null;
    } else {
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      console.log('üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:', JSON.stringify(data[0], null, 2));
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      if (data && data.length > 0) {
        await supabase.from(tableName).delete().eq('id', data[0].id);
        console.log('üóëÔ∏è  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
      }
      
      return data[0];
    }
  } catch (error) {
    console.log('‚ùå Exception:', error.message);
    return null;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
function generateFixedMigration(tableStructure) {
  console.log('\nüìù ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß...');
  
  if (!tableStructure) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡πÑ‡∏î‡πâ');
    return;
  }

  const columns = Object.keys(tableStructure);
  console.log('üìä ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:', columns.join(', '));

  // ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô
  let nameColumn = 'name';
  if (columns.includes('plan_name')) {
    nameColumn = 'plan_name';
  } else if (columns.includes('title')) {
    nameColumn = 'title';
  } else if (columns.includes('label')) {
    nameColumn = 'label';
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á INSERT statement
  const insertSQL = `-- ===================================================================
-- FIXED MIGRATION FOR INSTALLMENT_PLANS
-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
-- ===================================================================

-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
${columns.includes('name') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS name VARCHAR(255);'}
${columns.includes('description') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS description TEXT;'}
${columns.includes('min_amount') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS min_amount DECIMAL(12,2) DEFAULT 0;'}
${columns.includes('max_amount') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS max_amount DECIMAL(12,2);'}
${columns.includes('requires_guarantor') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS requires_guarantor BOOLEAN DEFAULT FALSE;'}
${columns.includes('is_active') ? '' : 'ALTER TABLE installment_plans ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE;'}

-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ${nameColumn})
INSERT INTO installment_plans (${nameColumn}${columns.includes('months') ? ', months' : ''}${columns.includes('interest_rate') ? ', interest_rate' : ''}${columns.includes('down_payment_percent') ? ', down_payment_percent' : ''}${columns.includes('processing_fee') ? ', processing_fee' : ''}${columns.includes('description') ? ', description' : ''}${columns.includes('is_active') ? ', is_active' : ''})
SELECT * FROM (VALUES
    ('‡∏ú‡πà‡∏≠‡∏ô 0% 6 ‡∏á‡∏ß‡∏î'${columns.includes('months') ? ', 6' : ''}${columns.includes('interest_rate') ? ', 0.00' : ''}${columns.includes('down_payment_percent') ? ', 20.00' : ''}${columns.includes('processing_fee') ? ', 500.00' : ''}${columns.includes('description') ? ', \'‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ 6 ‡∏á‡∏ß‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢\'' : ''}${columns.includes('is_active') ? ', TRUE' : ''}),
    ('‡∏ú‡πà‡∏≠‡∏ô 0% 12 ‡∏á‡∏ß‡∏î'${columns.includes('months') ? ', 12' : ''}${columns.includes('interest_rate') ? ', 0.00' : ''}${columns.includes('down_payment_percent') ? ', 30.00' : ''}${columns.includes('processing_fee') ? ', 1000.00' : ''}${columns.includes('description') ? ', \'‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ 12 ‡∏á‡∏ß‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢\'' : ''}${columns.includes('is_active') ? ', TRUE' : ''})
) AS new_plans(${nameColumn}${columns.includes('months') ? ', months' : ''}${columns.includes('interest_rate') ? ', interest_rate' : ''}${columns.includes('down_payment_percent') ? ', down_payment_percent' : ''}${columns.includes('processing_fee') ? ', processing_fee' : ''}${columns.includes('description') ? ', description' : ''}${columns.includes('is_active') ? ', is_active' : ''})
WHERE NOT EXISTS (
    SELECT 1 FROM installment_plans 
    WHERE installment_plans.${nameColumn} = new_plans.${nameColumn}
);

-- ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
SELECT 'Fixed migration completed!' as result;`;

  console.log('üìÑ Fixed Migration Script:');
  console.log(insertSQL);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
  import('fs').then(fs => {
    fs.writeFileSync('fixed_installment_plans_migration.sql', insertSQL);
    console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: fixed_installment_plans_migration.sql');
  });

  return insertSQL;
}

/**
 * Main function
 */
async function main() {
  console.log('üöÄ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á...');
  console.log(`üì° URL: ${supabaseUrl}`);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    const { data, error } = await supabase.from('installment_plans').select('id').limit(1);
    if (error && !error.message.includes('does not exist')) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`);
    }
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const { existingColumns } = await discoverColumns('installment_plans');
    
    console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö:');
    existingColumns.forEach(col => {
      console.log(`  ‚úÖ ${col.name} ${col.required ? '(required)' : '(optional)'}`);
    });

    // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const tableStructure = await createTestRecord('installment_plans', existingColumns);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
    generateFixedMigration(tableStructure);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
main().then(() => {
  console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå:', error);
  process.exit(1);
});