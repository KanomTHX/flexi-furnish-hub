import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  'https://hartshwcchbsnmbrjdyn.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhcnRzaHdjY2hic25tYnJqZHluIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDAzNzU3NCwiZXhwIjoyMDY5NjEzNTc0fQ.EuWZV7-3o9GsDPGKAS4L4L3t7GKQkn7kfnoHpc9IzOw'
);

async function finalContractsStructureTest() {
  console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á installment_contracts');
  console.log('================================================================');

  // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  const testData = {
    status: 'pending',
    contract_number: 'TEST-001',
    transaction_id: '00000000-0000-0000-0000-000000000001',
    down_payment: 5000 // ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  };

  try {
    console.log('‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß...');
    const { data, error } = await supabase
      .from('installment_contracts')
      .insert(testData)
      .select();

    if (error) {
      console.log(`‚ùå Error: ${error.message}`);
      
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ NOT NULL constraint ‡∏≠‡∏∑‡πà‡∏ô
      if (error.message.includes('null value in column')) {
        const match = error.message.match(/null value in column "([^"]+)"/);
        if (match) {
          console.log(`‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ${match[1]}`);
          
          // ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
          const missingColumn = match[1];
          let additionalValue;
          
          if (missingColumn.includes('amount')) {
            additionalValue = 50000;
          } else if (missingColumn.includes('id')) {
            additionalValue = '00000000-0000-0000-0000-000000000002';
          } else if (missingColumn.includes('date')) {
            additionalValue = new Date().toISOString().split('T')[0];
          } else {
            additionalValue = 1;
          }
          
          const completeData = {
            ...testData,
            [missingColumn]: additionalValue
          };
          
          console.log(`‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° ${missingColumn}: ${additionalValue}`);
          const { data: completeResult, error: completeError } = await supabase
            .from('installment_contracts')
            .insert(completeData)
            .select();
            
          if (completeError) {
            console.log(`‚ùå ‡∏¢‡∏±‡∏á‡∏°‡∏µ error: ${completeError.message}`);
          } else {
            console.log('‚úÖ Insert ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            if (completeResult && completeResult[0]) {
              console.log('\nüìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏° installment_contracts:');
              Object.keys(completeResult[0]).forEach(col => {
                const value = completeResult[0][col];
                const type = typeof value;
                console.log(`   - ${col}: ${type} = ${value}`);
              });
              
              // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
              await supabase
                .from('installment_contracts')
                .delete()
                .eq('id', completeResult[0].id);
              console.log('üóëÔ∏è  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
            }
          }
        }
      } else if (error.message.includes('violates foreign key constraint')) {
        console.log('‚ö†Ô∏è  Foreign key constraint - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• reference ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
        console.log('   ‡πÅ‡∏ï‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß');
      }
    } else {
      console.log('‚úÖ Insert ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      if (data && data[0]) {
        console.log('\nüìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏° installment_contracts:');
        Object.keys(data[0]).forEach(col => {
          const value = data[0][col];
          const type = typeof value;
          console.log(`   - ${col}: ${type} = ${value}`);
        });
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        await supabase
          .from('installment_contracts')
          .delete()
          .eq('id', data[0].id);
        console.log('üóëÔ∏è  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
      }
    }

  } catch (err) {
    console.error('Error:', err.message);
  }

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
  console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö:');
  console.log('================================================================');
  console.log('installment_contracts:');
  console.log('   - status: enum (pending, ...)');
  console.log('   - contract_number: VARCHAR (NOT NULL)');
  console.log('   - transaction_id: UUID (NOT NULL)');
  console.log('   - down_payment: NUMERIC (NOT NULL)');
  console.log('');
  console.log('installment_payments:');
  console.log('   - installment_plan_id: UUID (reference to installment_plans)');
  console.log('   - payment_number: INTEGER (NOT NULL)');
  console.log('   - amount_due: NUMERIC (NOT NULL)');
  console.log('   - amount_paid: NUMERIC');
  console.log('   - payment_date: DATE');
  console.log('   - payment_method: VARCHAR');
  console.log('   - status: VARCHAR');
}

finalContractsStructureTest();