// ===================================================================
// DISCOVER ALL REQUIRED COLUMNS
// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
// ===================================================================

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á INSERT ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡πà‡∏≤
 */
async function discoverAllRequiredColumns(tableName) {
  console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableName}...`);
  
  const allRequiredColumns = [];
  
  try {
    // ‡∏•‡∏≠‡∏á INSERT ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π error
    const { error } = await supabase
      .from(tableName)
      .insert({});

    if (error) {
      console.log('üìã Error message:', error.message);
      
      // Parse error message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      if (error.message.includes('null value in column')) {
        // ‡∏´‡∏≤ pattern ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const matches = error.message.match(/null value in column "([^"]+)"/g);
        if (matches) {
          matches.forEach(match => {
            const column = match.match(/"([^"]+)"/)[1];
            if (!allRequiredColumns.includes(column)) {
              allRequiredColumns.push(column);
              console.log(`  üîë ${column} - REQUIRED`);
            }
          });
        }
        
        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤ pattern ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢
        const violatesPattern = error.message.match(/violates not-null constraint/);
        if (violatesPattern) {
          // ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å context
          const contextMatches = error.message.match(/column "([^"]+)" of relation/g);
          if (contextMatches) {
            contextMatches.forEach(match => {
              const column = match.match(/"([^"]+)"/)[1];
              if (!allRequiredColumns.includes(column)) {
                allRequiredColumns.push(column);
                console.log(`  üîë ${column} - REQUIRED (from constraint)`);
              }
            });
          }
        }
      }
    }
  } catch (error) {
    console.log(`  ‚ö†Ô∏è  Exception: ${error.message}`);
  }

  return allRequiredColumns;
}

/**
 * ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
async function testWithAllRequiredColumns(tableName, requiredColumns) {
  console.log(`\nüß™ ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...`);
  
  const testData = {};
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  for (const column of requiredColumns) {
    if (column === 'plan_number') {
      testData[column] = 'TEST001';
    } else if (column === 'name') {
      testData[column] = '‡πÅ‡∏ú‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö';
    } else if (column === 'months') {
      testData[column] = 6;
    } else if (column === 'interest_rate') {
      testData[column] = 0;
    } else if (column === 'down_payment') {
      testData[column] = 1000;
    } else if (column === 'total_amount') {
      testData[column] = 10000;
    } else if (column === 'installment_amount') {
      testData[column] = 1666.67;
    } else if (column === 'status') {
      testData[column] = 'active';
    } else if (column === 'branch_id') {
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤ branch_id ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô
      try {
        const branchResult = await supabase.from('branches').select('id').limit(1);
        if (branchResult.data && branchResult.data.length > 0) {
          testData[column] = branchResult.data[0].id;
        } else {
          testData[column] = '00000000-0000-0000-0000-000000000000';
        }
      } catch (error) {
        testData[column] = '00000000-0000-0000-0000-000000000000';
      }
    } else if (column.includes('created_at') || column.includes('updated_at')) {
      // ‡∏Ç‡πâ‡∏≤‡∏° timestamp columns - ‡πÉ‡∏´‡πâ database ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    } else if (column.includes('id') && column !== 'plan_number') {
      testData[column] = '00000000-0000-0000-0000-000000000000';
    } else {
      testData[column] = 'test';
    }
  }

  console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', JSON.stringify(testData, null, 2));

  try {
    const { data, error } = await supabase
      .from(tableName)
      .insert(testData)
      .select();

    if (error) {
      console.log('‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ:', error.message);
      
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ error ‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      if (error.message.includes('null value in column')) {
        const newMatches = error.message.match(/null value in column "([^"]+)"/g);
        if (newMatches) {
          console.log('üîç ‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:');
          newMatches.forEach(match => {
            const column = match.match(/"([^"]+)"/)[1];
            if (!requiredColumns.includes(column)) {
              console.log(`  üîë ${column} - REQUIRED (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)`);
              requiredColumns.push(column);
            }
          });
        }
      }
      
      return null;
    } else {
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      console.log('üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:', JSON.stringify(data[0], null, 2));
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      if (data && data.length > 0) {
        await supabase.from(tableName).delete().eq('id', data[0].id);
        console.log('üóëÔ∏è  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
      }
      
      return data[0];
    }
  } catch (error) {
    console.log('‚ùå Exception:', error.message);
    return null;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
 */
function generateUltimateMigration(tableStructure, requiredColumns) {
  console.log('\nüìù ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...');
  
  const columns = tableStructure ? Object.keys(tableStructure) : [];
  console.log('üìä ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', columns.join(', '));
  console.log('üîë ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:', requiredColumns.join(', '));

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á INSERT statement ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const migrationSQL = `-- ===================================================================
-- ULTIMATE MIGRATION FOR INSTALLMENT_PLANS
-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
-- ===================================================================

-- ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ${requiredColumns.join(', ')}

-- 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
ALTER TABLE installment_plans 
${requiredColumns.includes('name') && !columns.includes('name') ? 'ADD COLUMN IF NOT EXISTS name VARCHAR(255),' : ''}
${requiredColumns.includes('months') && !columns.includes('months') ? 'ADD COLUMN IF NOT EXISTS months INTEGER,' : ''}
${requiredColumns.includes('down_payment_percent') && !columns.includes('down_payment_percent') ? 'ADD COLUMN IF NOT EXISTS down_payment_percent DECIMAL(5,2),' : ''}
${requiredColumns.includes('processing_fee') && !columns.includes('processing_fee') ? 'ADD COLUMN IF NOT EXISTS processing_fee DECIMAL(10,2) DEFAULT 0,' : ''}
${requiredColumns.includes('description') && !columns.includes('description') ? 'ADD COLUMN IF NOT EXISTS description TEXT,' : ''}
${requiredColumns.includes('min_amount') && !columns.includes('min_amount') ? 'ADD COLUMN IF NOT EXISTS min_amount DECIMAL(12,2) DEFAULT 0,' : ''}
${requiredColumns.includes('max_amount') && !columns.includes('max_amount') ? 'ADD COLUMN IF NOT EXISTS max_amount DECIMAL(12,2),' : ''}
${requiredColumns.includes('requires_guarantor') && !columns.includes('requires_guarantor') ? 'ADD COLUMN IF NOT EXISTS requires_guarantor BOOLEAN DEFAULT FALSE,' : ''}
${requiredColumns.includes('is_active') && !columns.includes('is_active') ? 'ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE,' : ''}
${requiredColumns.includes('total_amount') && !columns.includes('total_amount') ? 'ADD COLUMN IF NOT EXISTS total_amount DECIMAL(12,2),' : ''}
${requiredColumns.includes('installment_amount') && !columns.includes('installment_amount') ? 'ADD COLUMN IF NOT EXISTS installment_amount DECIMAL(12,2),' : ''}
ADD COLUMN IF NOT EXISTS temp_column INTEGER; -- dummy column to avoid syntax error

-- ‡∏•‡∏ö dummy column
ALTER TABLE installment_plans DROP COLUMN IF EXISTS temp_column;

-- 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
DO $$
DECLARE
    default_branch_id UUID;
BEGIN
    -- ‡∏´‡∏≤ branch_id ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    SELECT id INTO default_branch_id FROM branches LIMIT 1;
    IF default_branch_id IS NULL THEN
        default_branch_id := '00000000-0000-0000-0000-000000000000'::uuid;
    END IF;
    
    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÉ‡∏™‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    INSERT INTO installment_plans (
        ${requiredColumns.map(col => {
          if (col.includes('created_at') || col.includes('updated_at') || col === 'id') {
            return null; // ‡∏Ç‡πâ‡∏≤‡∏° auto-generated columns
          }
          return col;
        }).filter(Boolean).join(',\n        ')}
    )
    SELECT * FROM (VALUES
        (${requiredColumns.map(col => {
          if (col.includes('created_at') || col.includes('updated_at') || col === 'id') {
            return null;
          }
          switch(col) {
            case 'plan_number': return "'PLAN006'";
            case 'name': return "'‡∏ú‡πà‡∏≠‡∏ô 0% 6 ‡∏á‡∏ß‡∏î'";
            case 'months': return '6';
            case 'interest_rate': return '0.00';
            case 'down_payment': return '2000.00';
            case 'down_payment_percent': return '20.00';
            case 'processing_fee': return '500.00';
            case 'description': return "'‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ 6 ‡∏á‡∏ß‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢'";
            case 'min_amount': return '5000';
            case 'max_amount': return '50000';
            case 'requires_guarantor': return 'FALSE';
            case 'is_active': return 'TRUE';
            case 'status': return "'active'";
            case 'total_amount': return '10000.00';
            case 'installment_amount': return '1333.33';
            case 'branch_id': return 'default_branch_id';
            default: return "'test'";
          }
        }).filter(Boolean).join(', ')})
    ) AS new_plans(${requiredColumns.map(col => {
      if (col.includes('created_at') || col.includes('updated_at') || col === 'id') {
        return null;
      }
      return col;
    }).filter(Boolean).join(', ')})
    WHERE NOT EXISTS (
        SELECT 1 FROM installment_plans 
        WHERE ${requiredColumns.includes('plan_number') ? 'installment_plans.plan_number = new_plans.plan_number' : '1=0'}
    );
    
    RAISE NOTICE 'Added installment plan successfully';
END $$;

-- ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
SELECT 'Ultimate installment_plans migration completed!' as result;`;

  console.log('üìÑ Ultimate Migration Script:');
  console.log(migrationSQL);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
  import('fs').then(fs => {
    fs.writeFileSync('ultimate_installment_plans_migration.sql', migrationSQL);
    console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: ultimate_installment_plans_migration.sql');
  });

  return migrationSQL;
}

/**
 * Main function
 */
async function main() {
  console.log('üöÄ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á migration ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...');
  console.log(`üì° URL: ${supabaseUrl}`);

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    const { data, error } = await supabase.from('installment_plans').select('id').limit(1);
    if (error && !error.message.includes('does not exist')) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error.message}`);
    }
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const requiredColumns = await discoverAllRequiredColumns('installment_plans');
    
    // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const tableStructure = await testWithAllRequiredColumns('installment_plans', requiredColumns);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á migration script ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    generateUltimateMigration(tableStructure, requiredColumns);

    console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:');
    requiredColumns.forEach(col => {
      console.log(`  üîë ${col}`);
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
main().then(() => {
  console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå:', error);
  process.exit(1);
});