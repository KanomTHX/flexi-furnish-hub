#!/bin/bash

# Cron Backup Setup Script
# This script sets up automated database backups using cron

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# Get current script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# Default configuration
DEFAULT_SCHEDULE="0 2 * * *"  # Daily at 2 AM
DEFAULT_BACKUP_DIR="$PROJECT_DIR/backups"
DEFAULT_RETENTION_DAYS=30

show_usage() {
    echo "Cron Backup Setup Script"
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --schedule CRON     Cron schedule (default: '$DEFAULT_SCHEDULE')"
    echo "  --backup-dir DIR    Backup directory (default: '$DEFAULT_BACKUP_DIR')"
    echo "  --retention DAYS    Retention period in days (default: $DEFAULT_RETENTION_DAYS)"
    echo "  --email EMAIL       Email for notifications"
    echo "  --webhook URL       Webhook URL for notifications"
    echo "  --remove            Remove existing cron job"
    echo "  --help              Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                                    # Setup with defaults"
    echo "  $0 --schedule '0 */6 * * *'          # Every 6 hours"
    echo "  $0 --email admin@company.com         # With email notifications"
    echo "  $0 --remove                          # Remove cron job"
}

# Check if cron is available
check_cron() {
    if ! command -v crontab &> /dev/null; then
        error "crontab command not found. Please install cron."
    fi
    
    if ! systemctl is-active --quiet cron 2>/dev/null && ! systemctl is-active --quiet crond 2>/dev/null; then
        warn "Cron service may not be running. Please check your cron daemon."
    fi
    
    log "Cron availability check passed"
}

# Create backup script wrapper
create_backup_wrapper() {
    local schedule=$1
    local backup_dir=$2
    local retention_days=$3
    local email=$4
    local webhook=$5
    
    local wrapper_script="$SCRIPT_DIR/cron-backup-wrapper.sh"
    
    log "Creating backup wrapper script: $wrapper_script"
    
    cat > "$wrapper_script" << EOF
#!/bin/bash

# Cron Backup Wrapper Script
# Generated by setup-cron-backup.sh on $(date)

# Set environment variables
export PATH="/usr/local/bin:/usr/bin:/bin:\$PATH"
export BACKUP_STORAGE_PATH="$backup_dir"
export BACKUP_RETENTION_DAYS="$retention_days"

# Set notification variables
$([ -n "$email" ] && echo "export BACKUP_NOTIFICATION_EMAIL=\"$email\"")
$([ -n "$webhook" ] && echo "export BACKUP_WEBHOOK_URL=\"$webhook\"")

# Change to project directory
cd "$PROJECT_DIR"

# Load environment variables if available
if [ -f ".env.local" ]; then
    source .env.local
fi

# Run the backup script
exec "$SCRIPT_DIR/backup-database.sh" >> "$backup_dir/cron-backup.log" 2>&1
EOF
    
    chmod +x "$wrapper_script"
    log "Backup wrapper script created and made executable"
}

# Setup cron job
setup_cron_job() {
    local schedule=$1
    local wrapper_script="$SCRIPT_DIR/cron-backup-wrapper.sh"
    
    log "Setting up cron job with schedule: $schedule"
    
    # Get current crontab
    local temp_cron=$(mktemp)
    crontab -l 2>/dev/null | grep -v "# Warehouse System Database Backup" | grep -v "$wrapper_script" > "$temp_cron" || true
    
    # Add new cron job
    echo "# Warehouse System Database Backup" >> "$temp_cron"
    echo "$schedule $wrapper_script" >> "$temp_cron"
    
    # Install new crontab
    if crontab "$temp_cron"; then
        log "Cron job installed successfully"
    else
        error "Failed to install cron job"
    fi
    
    rm "$temp_cron"
}

# Remove cron job
remove_cron_job() {
    log "Removing existing cron job..."
    
    local temp_cron=$(mktemp)
    crontab -l 2>/dev/null | grep -v "# Warehouse System Database Backup" | grep -v "cron-backup-wrapper.sh" > "$temp_cron" || true
    
    if crontab "$temp_cron"; then
        log "Cron job removed successfully"
    else
        warn "Failed to remove cron job or no cron job was found"
    fi
    
    rm "$temp_cron"
    
    # Remove wrapper script
    local wrapper_script="$SCRIPT_DIR/cron-backup-wrapper.sh"
    if [ -f "$wrapper_script" ]; then
        rm "$wrapper_script"
        log "Removed wrapper script: $wrapper_script"
    fi
}

# Verify cron job
verify_cron_job() {
    log "Verifying cron job installation..."
    
    if crontab -l 2>/dev/null | grep -q "cron-backup-wrapper.sh"; then
        log "Cron job is installed:"
        crontab -l | grep -A1 "# Warehouse System Database Backup"
    else
        warn "Cron job not found in crontab"
    fi
}

# Test backup script
test_backup() {
    local backup_dir=$1
    
    log "Testing backup script..."
    
    # Create backup directory if it doesn't exist
    mkdir -p "$backup_dir"
    
    # Run backup script in dry-run mode
    if "$SCRIPT_DIR/backup-database.sh" --dry-run; then
        log "Backup script test passed"
    else
        error "Backup script test failed"
    fi
}

# Main function
main() {
    local schedule="$DEFAULT_SCHEDULE"
    local backup_dir="$DEFAULT_BACKUP_DIR"
    local retention_days="$DEFAULT_RETENTION_DAYS"
    local email=""
    local webhook=""
    local remove_job=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --schedule)
                schedule="$2"
                shift 2
                ;;
            --backup-dir)
                backup_dir="$2"
                shift 2
                ;;
            --retention)
                retention_days="$2"
                shift 2
                ;;
            --email)
                email="$2"
                shift 2
                ;;
            --webhook)
                webhook="$2"
                shift 2
                ;;
            --remove)
                remove_job=true
                shift
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                error "Unknown option: $1"
                ;;
        esac
    done
    
    # Handle remove operation
    if [ "$remove_job" = true ]; then
        remove_cron_job
        exit 0
    fi
    
    # Validate schedule format
    if ! echo "$schedule" | grep -qE '^[0-9*,-/]+ [0-9*,-/]+ [0-9*,-/]+ [0-9*,-/]+ [0-9*,-/]+$'; then
        error "Invalid cron schedule format: $schedule"
    fi
    
    # Validate retention days
    if ! [[ "$retention_days" =~ ^[0-9]+$ ]] || [ "$retention_days" -lt 1 ]; then
        error "Invalid retention days: $retention_days"
    fi
    
    log "Setting up automated database backups..."
    log "Schedule: $schedule"
    log "Backup directory: $backup_dir"
    log "Retention period: $retention_days days"
    [ -n "$email" ] && log "Email notifications: $email"
    [ -n "$webhook" ] && log "Webhook notifications: $webhook"
    
    # Setup process
    check_cron
    test_backup "$backup_dir"
    create_backup_wrapper "$schedule" "$backup_dir" "$retention_days" "$email" "$webhook"
    setup_cron_job "$schedule"
    verify_cron_job
    
    log "Automated backup setup completed successfully!"
    log ""
    log "Next steps:"
    log "1. Verify the cron job is working: crontab -l"
    log "2. Check backup logs: tail -f $backup_dir/cron-backup.log"
    log "3. Test manual backup: $SCRIPT_DIR/backup-database.sh"
    log ""
    log "To remove the cron job later, run: $0 --remove"
}

# Run main function
main "$@"